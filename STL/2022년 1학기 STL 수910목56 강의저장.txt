

파일이름: SaveFile.cpp
파일크기: 1470
2022-03-03 13:49:33 GMT+9

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(1주 2일)
//
// 
// - save.h와 save.cpp 분할
//------------------------------------------------------------------

#include <iostream>
#include <string_view>
#include <filesystem>
#include <chrono>
#include <fstream>
#include <vector>
#include <algorithm>
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)


void save( string_view );

int main()
{
	// string과 string_view의 크기를 출력
	cout << sizeof(string) << endl;
	cout << sizeof(string_view) << endl;
	//



	save("SaveFile.cpp");
}

void save(string_view fname)
{
	// 읽을 파일을 연다
	ifstream in { fname.data() };

	// 쓸 파일도 연다
	ofstream out { "2022년 1학기 STL 수910목56 강의저장.txt", ios::app };

	out << endl << endl;

	// 저장할 파일의 이름을 파일에 출력한다
	out << "파일이름: " << fname << endl;
	
	// 저장할 파일의 크기를 출력한다(c++17)
	out << "파일크기: " << filesystem::file_size(fname) << endl;

	// 현재 날짜와 시간을 출력한다(c++20)
	auto time = floor<chrono::seconds>(chrono::system_clock::now());
	out << chrono::zoned_time("Asia/Seoul", time) << endl;
	out << endl;


	// 읽을 파일의 정보를 읽어 쓸 파일에 덧붙여 쓴다
	// 1. 파일의 내용을 벡터로 읽어온다
	vector<char> v{ istreambuf_iterator<char>{in}, {} };

	// 2. 벡터에 있는 내용을 파일에 복사한다
	copy(v.begin(), v.end(), ostream_iterator<char>{out});

}

파일이름: save.h
파일크기: 68
2022-03-03 14:01:46 GMT+9

#pragma once
#include <string_view>

void save(std::string_view);

파일이름: save.cpp
파일크기: 1424
2022-03-03 14:01:47 GMT+9

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(1주 2일)
// SAVE.CPP
// 
// 함수 save에 파일이름을 알려주면 강의를 저장하는
// 
// "2022년 1학기 STL 수910목56 강의저장.txt"에 덧붙여 기록한다.
// 
// 2022.3.3							programed by robbi
//------------------------------------------------------------------




#include "save.h"
#include <fstream>
#include <filesystem>
#include <chrono>
#include <vector>
#include <algorithm>

void save( std::string_view fname)
{
	// 읽을 파일을 연다
	std::ifstream in{ fname.data() };

	// 쓸 파일도 연다
	std::ofstream out{ "2022년 1학기 STL 수910목56 강의저장.txt", std::ios::app };

	out << std::endl << std::endl;

	// 저장할 파일의 이름을 파일에 출력한다
	out << "파일이름: " << fname << std::endl;

	// 저장할 파일의 크기를 출력한다(c++17)
	out << "파일크기: " << std::filesystem::file_size(fname) << std::endl;

	// 현재 날짜와 시간을 출력한다(c++20)
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());
	out << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;
	out << std::endl;


	// 읽을 파일의 정보를 읽어 쓸 파일에 덧붙여 쓴다
	// 1. 파일의 내용을 벡터로 읽어온다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 2. 벡터에 있는 내용을 파일에 복사한다
	copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}

파일이름: 소스.cpp
파일크기: 413
2022-03-03 14:01:47 GMT+9

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(1주 2일)
//
// 
// - save.h와 save.cpp 분할
//------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)




int main()
{
	save("save.h");
	save("save.cpp");
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 610
2022-03-03 14:20:59 GMT+9

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(1주 2일)
//
// [문제] main()을 수정하면 안된다
// a 와 b의 값을 교환하라		2, 1
// 
// &의 의미
//------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)


void change(int&, int&);

int main()
{
	int a{ 1 };
	int b{ 2 };

	change(a, b);

	cout << a << ", " << b << endl;

	save("소스.cpp");
}

void change(int& a, int& b)
{
	int temp = a;
	a = b;
	b = temp;
}

파일이름: 소스.cpp
파일크기: 834
2022-03-03 15:11:54 GMT+9

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(1주 2일)
//
// [문제] main()을 수정하면 안된다
// a 와 b의 값을 교환하라		2, 1
// 답지에 써라
// 
//------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)


class Dog {
	int num;

public:

	Dog(int a) : num{ a } {

	}

	friend ostream& operator<<(ostream&, const Dog&);

};

ostream& operator<<(ostream& os , const Dog& dog) 
{
	os << dog.num;
	return os;
}

void change(Dog&, Dog&);

int main()
{
	Dog a{ 1 };
	Dog b{ 2 };

	change(a, b);

	cout << a << ", " << b << endl;

	save("소스.cpp");
}

void change(Dog& a, Dog& b)
{
	Dog temp = a;
	a = b;
	b = temp;

}

파일이름: 소스.cpp
파일크기: 933
2022-03-03 15:17:41 GMT+9

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(1주 2일)
//
// [문제] main()을 수정하면 안된다
// a 와 b의 값을 교환하라		2, 1
// 답지에 써라
// 
// class 복습 - special 함수의 의미
// 
// 다음시간 - template
// 대량의 자료를 생성 저장 조작
//------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)


class Dog {
	int num;

public:

	Dog(int a) : num{ a } {

	}

	friend ostream& operator<<(ostream&, const Dog&);

};

ostream& operator<<(ostream& os , const Dog& dog) 
{
	os << dog.num;
	return os;
}

void change(Dog&, Dog&);

int main()
{
	Dog a{ 1 };
	Dog b{ 2 };

	change(a, b);

	cout << a << ", " << b << endl;

	save("소스.cpp");
}

void change(Dog& a, Dog& b)
{
	Dog temp = a;
	a = b;
	b = temp;

}

파일이름: 소스.cpp
파일크기: 707

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 1일)
//
// template
// 대량의 자료를 생성 저장 조작
//------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 템플릿 함수 change를 선언하고 정의하라.
//
//

template <class T>
void change(T& a, T& b)
{
	T temp{ a };
	a = b;
	b = temp;
}
int main()
{
	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << "," << b << endl;
	}

	{
		string a{ "1"s }, b{ "2"s };
		change(a, b);
		cout << a << "," << b << endl;
	}

	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 808

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 1일)
//
// template - 자료형과 관계없는 함수 또는 클래스를 작성(keyword)
//			- generic programing(일반적인 프로그래밍)
// 대량의 자료를 생성 저장 조작
//------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 템플릿 함수 change를 선언하고 정의하라.
//
//

template <class T>
void change(T& a, T& b)
{
	T temp{ a };
	a = b;
	b = temp;
}
int main()
{
	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << "," << b << endl;
	}

	{
		string a{ "1"s }, b{ "2"s };
		change(a, b);
		cout << a << "," << b << endl;
	}

	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 619

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 1일)
//
// 대량의 자료를 생성 저장 조작
//------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 임의의 값을 갖는(랜덤값을 갖는) int 1000개를 화면에 출력하라

random_device rd;
uniform_int_distribution<int> uid;
default_random_engine dre;


int main()
{

	for (int i = 0; i < 1000; ++i) {
		cout << uid(dre) << endl;
	}
	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 702

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 1일)
//
// 대량의 자료를 생성 저장 조작
//------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 임의의 값을 갖는(랜덤값을 갖는) int 1000개를 화면에 출력하라
//int 의 최대값 출력

random_device rd;
uniform_int_distribution<int> uid;
default_random_engine dre;


int main()
{
	int num = numeric_limits<int>::max();

	cout << num;
	//for (int i = 0; i < 1000; ++i) {
	//	cout << uid(dre) << endl;
	//}
	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 612

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 1일)
//
// 대량의 자료를 생성 저장 조작
//------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 엔진과 분포를 사용 int 1000개를 화면에 출력하라

random_device rd;
uniform_int_distribution<int> uid;
default_random_engine dre(rd());


int main()
{
	
	for (int i = 0; i < 1000; ++i) {
	cout << uid(dre) << endl;
	}
	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 815

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 1일)
//
// 랜덤엔진과 분포를 사용하여 랜덤값을 생성한다.
// 대량의 자료를 생성 저장 조작
//
// 다음시간 - 파일저장 다시
// 숙제 - 파일입출력 알아보기
//------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 엔진과 분포를 사용 int 1000개를 화면에 출력하라
// 'int 천개.txt' 파일에 저장하라

random_device rd;
uniform_int_distribution<int> uid;
default_random_engine dre(rd());


int main()
{
	ofstream out{ "int 천개.txt"};

	for (int i = 0; i < 1000; ++i) {
		out << uid(dre) << endl;
	}

	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 916

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 2일)
//
// 랜덤엔진과 분포를 사용하여 랜덤값을 생성한다.
// 대량의 자료를 생성 저장 조작
//------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
//#include <format>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 엔진과 분포를 사용 int 1000개를 화면에 출력하라
// 'int 천개.txt' 파일에 저장하라

uniform_int_distribution<int> uid;
default_random_engine dre;


int main()
{
	ofstream out{ "int 천개.txt"};

	for (int i = 0; i < 1000; ++i) {
		//cout << format("{:80}", uid(dre));   format() - 줄 맞춰서 출력해주는 함수, string으로 출력
		// {:<80}, {:^80}, {:80} - 왼쪽, 가운데, 오른쪽으로 정렬
		if (i % 4 == 0) 
			cout << endl;
	
	}

	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 923

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 2일)
//
// 랜덤엔진과 분포를 사용하여 랜덤값을 생성한다.
// 대량의 자료를 생성 저장 조작
//------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
//#include <format> c++ 20
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 엔진과 분포를 사용 int 1000개를 화면에 출력하라
// 'int 천개.txt' 파일에 저장하라

uniform_int_distribution<int> uid;
default_random_engine dre;


int main()
{
	ofstream out{ "int 천개.txt"};

	for (int i = 0; i < 1000; ++i) {
		//cout << format("{:80}", uid(dre));   format() - 줄 맞춰서 출력해주는 함수, string으로 출력
		// {:<80}, {:^80}, {:80} - 왼쪽, 가운데, 오른쪽으로 정렬
		if (i % 4 == 0) 
			cout << endl;
	}
	

	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 585

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 2일)
//
// 파일에 있는 자료 불러오기
//------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] "int 천개.txt"에 있는 int 1000개를 읽어 화면에 출력하라.


int main()
{
	ifstream in{ "int 천개.txt"};

	int num;
	for (int i{}; i < 1000; ++i) {
		in >> num;
		cout << num << '\t';
	}

	

	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 585

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 2일)
//
// 파일에 있는 자료 불러오기
//------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] "int 천개.txt"에 있는 int 1000개를 읽어 화면에 출력하라.


int main()
{
	ifstream in{ "int 천개.txt"};

	int num;
	for (int i{}; i < 1000; ++i) {
		in >> num;
		cout << num << '\t';
	}

	

	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 650

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 2일)
//
// 파일에 있는 자료 불러오기
//------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] "int 천개.txt"에 있는 int 1000개를 읽어 가장 큰 값을 찾아 화면에 출력하시오.


int main()
{
	ifstream in{ "int 천개.txt"};

	int num;
	int max{};
	for (int i{}; i < 1000; ++i) {
		in >> num;
		if (max < num)
			max = num;
	}
	cout << max << '\t';

	

	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 650

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 2일)
//
// 파일에 있는 자료 불러오기
//------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] "int 천개.txt"에 있는 int 1000개를 읽어 가장 큰 값을 찾아 화면에 출력하시오.


int main()
{
	ifstream in{ "int 천개.txt"};

	int num;
	int max{};
	for (int i{}; i < 1000; ++i) {
		in >> num;
		if (max < num)
			max = num;
	}
	cout << max << '\t';

	

	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 658

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 2일)
//
// 파일에 있는 자료 불러오기
//------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] "int 천개.txt"에 있는 int 1000개를 읽어 가장 큰 값을 찾아 화면에 출력하시오.
// 코드를 답안지에 쓰고 출력되는 큰값도 답에 적어라.


int main()
{
	ifstream in{ "int 천개.txt"};

	cout << *max_element(istream_iterator<int>{in}, {}) << endl;

	

	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 796

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 2일)
//
// 파일에 있는 자료 불러오기
//------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] int 1000개를 저장하는데 필요한 메모리는 몇 바이트입니까?
// - 만든 사람 마음대로
// 그렇지만 자료를 입출력하는데 가장 빠른 방식은 저수준 i/o를 사용


uniform_int_distribution<int> uid;
default_random_engine dre;

int main()
{
	ofstream out{ "int 천개.txt" };


	int num;
	for (int i{}; i < 1000; ++i) {
		num = uid(dre);
		out.write((const char*)&num, sizeof(int));
	}
	



	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 770

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 2일)
//
// 파일에 있는 자료 불러오기
// carriage return, Line Feed
//------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 출력파일의 write 함수로 메모리 전체를 기록하였다.
// 파일 크기가 맞나 확인하고 그렇지 않다면 이유를 설명하라.


uniform_int_distribution<int> uid;
default_random_engine dre;

int main()
{
	ofstream out{ "int 천개.txt" , ios::binary};


	int num;
	for (int i{}; i < 1000; ++i) {
		num = uid(dre);
		out.write((const char*)&num, sizeof(int));
	}
	



	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 758

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 2일)
//
// 파일에 있는 자료 불러오기
//------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
#include <algorithm>
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] "int 천개.txt" 파일 - int 1000개가 바이너리모드로 write() 함수로 기록했다
// 읽어서 최댓값을 화면에 출력하라.
// 코드와 출력값을 답지에 적어라.

int main()
{
	ifstream in{ "int 천개.txt", ios::binary };
	
	// 여기에 들어갈 코드
	int num[1000];
	in.read((char*)num, sizeof(int) * 1000);
	cout << *max_element(begin(num), end(num)) << endl;


	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 820

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(2주 2일)
//
// 파일에 있는 자료 불러오기
//------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
#include <algorithm>
#include <array>
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] "int 천개.txt" 파일 - int 1000개가 바이너리모드로 write() 함수로 기록했다
// 읽어서 최댓값을 화면에 출력하라.
// 코드와 출력값을 답지에 적어라.

int main()
{
	ifstream in{ "int 천개.txt", ios::binary };
	
	// 여기에 들어갈 코드
	array<int, 1000> num; // int num[1000]; - 사용 금지
	in.read((char*)num.data(), sizeof(int) * 1000);
	cout << *max_element(begin(num), end(num)) << endl;


	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 1130

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 1일)
//
// 지난시간 - int[] 대신 array<int, x> 를 써라
//
// 오늘 - c++ 컴파일러가 값을 아는 시점
//	1. 실행하기 전 - compile time -constexpr
//	2. 실행한 후 - run time 시에 결정될 값 -dynamic allocation
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다.
// 합계를 출력하라.
// 이 과정이 반복하라 - 문제점을 해결하라


int main()
{
	save("소스.cpp");
	while (1) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라.
		int* p{};
		try {
			p = new int[num]; // contiguous (붙어있음)
		}
		catch (exception& e) {
			cout << e.what() << endl;
		}
		for (int i{}; i < num; ++i) {
			p[i] = i + 1;
		}
		//합계
		int sum{};
		for (int i{}; i < num; ++i) {
			sum += p[i];
		}

		cout << sum << endl;
	}

}



파일이름: 소스.cpp
파일크기: 795

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 1일)
//
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[] 대신 array<int, x> 를 써라
// 지금시간 - int* 쓰지말자
//
//
// 오늘 - c++ 컴파일러가 값을 아는 시점
//	1. 실행하기 전 - compile time -constexpr
//	2. 실행한 후 - run time 시에 결정될 값 -dynamic allocation
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 


int main()
{
	//ifstream in{"자원"} 방식으로 class로 자원을 묶으면 자원 반납하는 데에 관여하지 않아도 됨 
	//예
	// FILE* fp = fopen("자원")
	// fclose(fp)
	// 이런거 하면 안됨


	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 827

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 1일)
//
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[] 대신 array<int, x> 를 써라
// 지금시간 - int* 쓰지말자
//
//
// 오늘 - c++ 컴파일러가 값을 아는 시점
//	1. 실행하기 전 - compile time -constexpr
//	2. 실행한 후 - run time 시에 결정될 값 -dynamic allocation
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 


int main()
{
	//ifstream in{"자원"} 방식으로 class로 자원을 묶으면 자원 반납하는 데에 관여하지 않아도 됨 
	//예
	// FILE* fp = fopen("자원")
	// fclose(fp)
	// 이런거 하면 안됨 (포인터로 자원을 받아오는 행위)


	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 1072

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 1일)
//
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[] 대신 array<int, x> 를 써라
// 지금시간 - int* 쓰지말자
//
//
// 오늘 - c++ 컴파일러가 값을 아는 시점
//	1. 실행하기 전 - compile time -constexpr
//	2. 실행한 후 - run time 시에 결정될 값 -dynamic allocation
//------------------------------------------------------------------
#include <iostream>
#include <memory>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[실습] 스마트포인터가 어떤지 관찰한다
// 객체의 생성과 소멸관찰이 필수이므로 초미니 클래스를 만들어 동작 관찰
//

struct Dog {
	Dog() { cout << "Dog 생성" << endl; }
	~Dog() { cout << "Dog 소멸" << endl; }
};

void f()
{
	throw 1;
}
int main()
{
	// RAII로 자동화
	unique_ptr<Dog[]> p{new Dog[3]};

	//사용 중 예외발생
	try {
		f(); // 예외를 던지는 함수 호출
	}
	catch (...) { // ... -> ellipses 인자가 무엇인지 모를때 적음
	
	}


	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 1179

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 1일)
//
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[] 대신 array<int, x> 를 써라
// 지금시간 - int* 쓰지말자 대신 unique_ptr<int>, unique_ptr<int[]> 를 써라
//
//
// 오늘 - c++ 컴파일러가 값을 아는 시점
//	1. 실행하기 전 - compile time -constexpr
//	2. 실행한 후 - run time 시에 결정될 값 -dynamic allocation
//
//------------------------------------------------------------------
#include <iostream>
#include <memory>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[실습] 스마트포인터가 어떤지 관찰한다
// 객체의 생성과 소멸관찰이 필수이므로 초미니 클래스를 만들어 동작 관찰
//

struct Dog {
	Dog() { cout << "Dog 생성" << endl; }
	~Dog() { cout << "Dog 소멸" << endl; }
};

void f()
{
	throw 1;
}
int main()
{
	// RAII로 자동화
	unique_ptr<Dog[]> p{new Dog[3]}; // Dog의 소멸을 보장 - 스택 되풀기(Stack unwinding)

	//사용 중 예외발생
	try {
		f(); // 예외를 던지는 함수 호출
	}
	catch (...) { // ... -> ellipses 인자가 무엇인지 모를때 적음
	
	}

	

	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 922

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 1일)
//
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[] 대신 array<int, x> 를 써라
// 지금시간 - int* 쓰지말자 대신 unique_ptr<int>, unique_ptr<int[]> 를 써라
//
//
// 오늘 - c++ 컴파일러가 값을 아는 시점
//	1. 실행하기 전 - compile time -constexpr
//	2. 실행한 후 - run time 시에 결정될 값 -dynamic allocation
//
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <vector>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] '소스.cpp'를 읽어서
// 소문자를 대문자로 바꿔
// '소스 대문자.cpp'로 저장하라

int main()
{
	ifstream in{ "소스.cpp" };
	ofstream out{ "소스 대문자.cpp" };

	vector<char> v{ istreambuf_iterator<char>{in}, {} };
	



	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 1049

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 1일)
//
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[] 대신 array<int, x> 를 써라
// 지금시간 - int* 쓰지말자 대신 unique_ptr<int>, unique_ptr<int[]> 를 써라
//
//
// 오늘 - c++ 컴파일러가 값을 아는 시점
//	1. 실행하기 전 - compile time -constexpr
//	2. 실행한 후 - run time 시에 결정될 값 -dynamic allocation
//
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] '소스.cpp'를 읽어서
// 소문자를 대문자로 바꿔
// '소스 대문자.cpp'로 저장하라

int main()
{
	ifstream in{ "소스.cpp" };
	ofstream out{ "소스 대문자.cpp" };

	vector<char> v{ istreambuf_iterator<char>{in}, {} };
	transform(v.begin(), v.end(), v.begin(), toupper);
	copy(v.begin(), v.end(), ostream_iterator<char>{out});


	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 875

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 2일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] '소스.cpp'를 읽어서
// 소문자를 대문자로 바꿔
// '소스 대문자.cpp'로 저장하라

int main()
{
	ifstream in{ "소스.cpp" }; // RAII
	ofstream out{ "소스 대문자.cpp" };

	// in >> noskipws -> 공백을 포함시킴
	// islower(ch) 함수 : ch가 소문자인지 확인
	// toupper 안에 islower가 내장


	vector<char> v{ istreambuf_iterator<char>{in}, {} };
	transform(v.begin(), v.end(), ostream_iterator<char>{out}, toupper);

	


	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 833

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 2일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] '소스.cpp'를 읽어서
// 소문자를 대문자로 바꿔
// '소스 대문자.cpp'로 저장하라

int main()
{
	ifstream in{ "소스.cpp" }; // RAII
	ofstream out{ "소스 대문자.cpp" };

	// in >> noskipws -> 공백을 포함시킴
	// islower(ch) 함수 : ch가 소문자인지 확인
	// toupper 안에 islower가 내장

	transform(istreambuf_iterator<char>{in}, {}, ostream_iterator<char>{out}, toupper);

	


	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 867

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 2일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] '소스.cpp'를 읽어서
// 소문자를 대문자로 바꿔
// '소스 대문자.cpp'로 저장하라

int main()
{
	ifstream in{ "소스.cpp" }; // RAII
	ofstream out{ "소스 대문자.cpp" };

	// in >> noskipws -> 공백을 포함시킴
	// islower(ch) 함수 : ch가 소문자인지 확인
	// toupper 안에 islower가 내장

	transform(istreambuf_iterator<char>{in}, {}, ostream_iterator<char>{out}, 
		[](char c) { return toupper(c); }
		);

	


	save("소스.cpp");
}




파일이름: 소스.cpp
파일크기: 740

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 2일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] '소스.cpp'를 읽어서
// 숫자를 별로 바꿔
// 화면에 출력하라

int main()
{
	ifstream in{ "소스.cpp" }; // RAII
	ofstream out{ "소스 대문자.cpp" };

	transform(istreambuf_iterator<char>{in}, {}, ostream_iterator<char>{cout}, 
		[](char c) { return isdigit(c) ? '*' : c; }
		);

	


	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 888

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 2일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 랜덤 int 100개를 생성한다.
// 오름차순으로 정렬한다. sort
// 정렬된 int 100 개를 생성하라.

random_device rd;
uniform_int_distribution<int> uid;
default_random_engine dre;


int main()
{
	array<int, 100> pn;
	for (int i{}; i < 100; ++i) {
		pn[i] = uid(dre);
	}

	sort(pn.begin(), pn.end());
	for (int i{}; i < 100; ++i) {
		cout << pn[i] << endl;
	}



	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 973

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 2일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 랜덤 int 100개를 생성한다.
// 오름차순으로 정렬한다. sort
// 정렬된 int 100 개를 생성하라.

random_device rd;
uniform_int_distribution<int> uid;
default_random_engine dre;


int main()
{
	array<int, 100> pn;

	for (int& num : pn) 
		num = uid(dre);

	cout << "정렬하기 전" << endl;
	for (int num : pn)
		cout << num << endl;


	sort(pn.begin(), pn.end());

	cout << "정렬한 후" << endl;
	for (int num : pn)
		cout << num << endl;



	save("소스.cpp");
}




파일이름: 소스.cpp
파일크기: 1006

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 2일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] [1 ,100} 랜덤 int 100개를 생성한다.
// 오름차순으로 정렬한다. sort
// 정렬된 int 100 개를 생성하라.

random_device rd;
uniform_int_distribution<int> uid{1, 100};
default_random_engine dre;


int main()
{
	array<int, 100> pn;

	for (int& num : pn) 
		num = uid(dre);

	cout << "정렬하기 전" << endl;
	for (int num : pn)
		cout << num << '\t';

	cout << endl;

	sort(pn.begin(), pn.end());

	cout << "정렬한 후" << endl;
	for (int num : pn)
		cout << num << '\t';



	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 1042

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 2일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] [1 ,100} 랜덤 int 100개를 생성한다.
// 오름차순으로 정렬한다. sort
// 정렬된 int 100 개를 생성하라.

random_device rd;
uniform_int_distribution<int> uid{1, 100};
default_random_engine dre;


int main()
{
	array<int, 100> pn;

	for (int& num : pn) 
		num = uid(dre);

	cout << "정렬하기 전" << endl;
	for (int num : pn)
		cout << num << '\t';

	cout << endl;

	sort(pn.begin(), pn.end(), [](int a, int b) { return a > b; });

	cout << "정렬한 후" << endl;
	for (int num : pn)
		cout << num << '\t';



	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 603

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 2일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 메모리 마지막 동네 소개

void f() 
{
	cout << "f 호출" << endl;
}

int main()
{
	f();

	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 725

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(3주 2일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 메모리 마지막 동네 소개

void f() 
{
	cout << "f 호출" << endl;
}

int main()
{
	f();
	save("소스.cpp");
}

/*
1. STACK
2. DATA
3. FREE STORE
4. CODE

addressof(f) -> 함수 포인터 반환
함수 이름이 함수의 시작 포인터이다.

*/

파일이름: 소스.cpp
파일크기: 629

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

 
int main()
{
	// 함수 이름이란? - 명령어들의 집합인 함수가 기록되어 있는 CODE 세그먼트의 시작번지이다.
	// 함수 이름의 자료형은?

	auto x = main;
	cout << typeid(x).name() << endl;
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 616

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)


int main()
{
	// 함수 이름이란? - 명령어들의 집합인 함수가 기록되어 있는 CODE 세그먼트의 시작번지이다.
	
	// 함수 포인터 (8 byte)
	int(*X)(void) = (int(*)(void))(main);
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 927

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <thread>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//재귀 호출은 스택 오버플로우로 죽게 됨

//호출 가능(Callable) 타입 (type)
//1. 함수 포인터 - CODE에서 해당함수의 시작번지를 저장

void jump()
{
	cout << "점프" << endl;
}

void slide()
{
	cout << "슬라이드" << endl;
}

int main()
{
	void(*p)(void) = jump;
	
	save("소스.cpp");

	int cnt{};

	while (true) {
		p();

		this_thread::sleep_for(1s);

		//3초마다 toggle
		if (++cnt % 3 == 0) {
			if (p == jump) 
				p = slide;
			else
				p = jump;
		}
	}
}

파일이름: 소스.cpp
파일크기: 1192

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <thread>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//재귀 호출은 스택 오버플로우로 죽게 됨

//호출 가능(Callable) 타입 (type)
//1. 함수 포인터 - CODE에서 해당함수의 시작번지를 저장

void jump()
{
	cout << "점프" << endl;
}

int g;

int main()
{
	save("소스.cpp");

	void(*p)(void) = jump;

	int cnt{};

	int* f = new int;

	cout << "CODE -		jump	" << addressof(jump) << endl;
	cout << "CODE -		main	" << addressof(main) << endl;
	cout << "CODE -		save	" << addressof(save) << endl;
	cout << "CODE -		p점프	" << addressof(*p) << endl;
	cout << endl;
	cout << "DATA -		g	" << addressof(g) << endl;
	cout << endl;
	cout << "STACK -	p	" << addressof(p) << endl;
	cout << "STACK -	f	" << addressof(f) << endl;
	cout << endl;
	cout << "FREE STORE -		" << addressof(*f) << endl;
}

파일이름: 소스.cpp
파일크기: 678

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <thread>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//호출 가능(Callable) 타입 (type)
//1. 함수 포인터 - CODE에서 해당함수의 시작번지를 저장 - 호출 가능한 자료형
//2. 람다(lambda) 

int main()
{
	[]() {
		cout << "반가워! 난 람다라고 해" << endl;
	}();

	

	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 717

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <thread>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//호출 가능(Callable) 타입 (type)
//1. 함수 포인터 - CODE에서 해당함수의 시작번지를 저장 - 호출 가능한 자료형
//2. 람다(lambda) 

int main()
{
	cout << typeid(
		[]() {
			cout << "반가워! 난 람다라고 해" << endl;
		} 
	).name() << endl;;

	

	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 768

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <thread>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//호출 가능(Callable) 타입 (type)
//1. 함수 포인터 - CODE에서 해당함수의 시작번지를 저장 - 호출 가능한 자료형
//2. 람다(lambda) 

int main()
{
	cout << typeid(
		[]() {
			cout << "반가워! 난 람다라고 해" << endl;
		}
	).name() << endl;;

	class Dog {};
	cout << typeid(Dog).name() << endl;

	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 770

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <thread>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//호출 가능(Callable) 타입 (type)
//1. 함수 포인터 - CODE에서 해당함수의 시작번지를 저장 - 호출 가능한 자료형
//2. 람다(lambda)

class Dog {};

int main()
{
	cout << typeid(
		[]() {
			cout << "반가워! 난 람다라고 해" << endl;
		}
	).name() << endl;;


	cout << typeid(Dog).name() << endl;

	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 907

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//호출 가능(Callable) 타입 (type)
//1. 함수 포인터 - CODE에서 해당함수의 시작번지를 저장 - 호출 가능한 자료형
//2. 람다(lambda) - 컴파일러가 만들어주는 class이다. (? class가 호출가능한가)
//3. ()을 오버로딩한 class ( () - 함수 호출 연산자)


int main()
{
	// 람다는 어디서 사용 되나
	array<int, 5> a{ 3,1,5,2,4 };

	sort(a.begin(), a.end(), [](int a, int b) {
		return a > b;
		});

	cout << a.data() << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 980

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//호출 가능(Callable) 타입 (type)
//1. 함수 포인터 - CODE에서 해당함수의 시작번지를 저장 - 호출 가능한 자료형
//2. 람다(lambda) - 컴파일러가 만들어주는 class이다. (? class가 호출가능한가)
//3. ()을 오버로딩한 class ( () - 함수 호출 연산자)


int main()
{
	// 람다는 어디서 사용 되나
	array<int, 5> a{ 3,1,5,2,4 };

	sort(a.begin(), a.end(), [](int a, int b) {
		cout << "람다를 이용하여" << a << ' - ' << b << endl;
		return a > b;
		});
	for (int n : a) {
		cout << n << endl;
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 974

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//호출 가능(Callable) 타입 (type)
//1. 함수 포인터 - CODE에서 해당함수의 시작번지를 저장 - 호출 가능한 자료형
//2. 람다(lambda) - 컴파일러가 만들어주는 class이다. (? class가 호출가능한가)
//3. ()을 오버로딩한 class ( () - 함수 호출 연산자)

class Dog {
public:
	bool operator()(int a, int b) {
		return a < b;
	}
};

int main()
{
	array<int, 5> a{ 3,1,5,2,4 };

	sort(a.begin(), a.end(), [](int a, int b) {
		return a > b;
		});
	for (int n : a) {
		cout << n << ' ';
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 939

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//호출 가능(Callable) 타입 (type)
//1. 함수 포인터 - CODE에서 해당함수의 시작번지를 저장 - 호출 가능한 자료형
//2. 람다(lambda) - 컴파일러가 만들어주는 class이다. (? class가 호출가능한가)
//3. ()을 오버로딩한 class ( () - 함수 호출 연산자)

class Dog {
public:
	bool operator()(int a, int b) {
		return a < b;
	}
};

int main()
{
	array<int, 5> a{ 3,1,5,2,4 };

	sort(a.begin(), a.end(), Dog{});
	for (int n : a) {
		cout << n << ' ';
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 938

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 호출가능타입(Callable type) - sort를 통해 알아본다
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include <functional>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//호출 가능(Callable) 타입 (type)
//1. 함수 포인터 - CODE에서 해당함수의 시작번지를 저장 - 호출 가능한 자료형
//2. 람다(lambda) - 컴파일러가 만들어주는 class이다. (? class가 호출가능한가)
//3. ()을 오버로딩한 class ( () - 함수 호출 연산자)
//4. 멤버함수 포인터

// 호출 가능한 타입은 무한개이다. ex) 람다는 선언모양이 같아도 타입이 서로 같지않음
//
// -> 모든 호출가능타입을 통일된 방식으로 표현할 수 있는 클래스 function

int main()
{
	function<int()> f = main;
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1310

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

/*
class STRING {
	int num;
	char* p;
	int id;
	static int gid;
public:
	explicit STRING() {};
	STRING(const char* s) : num{ strlen(s) }, p{ new char[num]} {
		id = ++gid;
		memcpy(p, s, num);
		// 관찰 메세지
		cout << "ctor [ " << id << "] 주소" << this << endl;
	};

	~STRING() {
		// 관찰메세지
		cout << "dtor [ " << id << "] 주소" << this << endl;
		delete[] p;
	}


	friend ostream& operator<<(ostream&, const STRING&);

};

int STRING::gid{};

ostream& operator<<(ostream& os, const STRING& STRING)
{
	os << STRING.p;
	return os;
}

int main()
{
	STRING a{ "2022 3 24" };
	STRING b{ "STL STRING 작성 시작" };
	cout << a << endl;
	cout << b << endl;
	save("소스.cpp");
}
*/
int main() {
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1332

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다


class STRING {
	int num; //4(8) - padding
	char* p; //8
	int id;  //4(8)
	static int gid;
public:
	explicit STRING() {};
	STRING(const char* s) : num( strlen(s) ), p{ new char[num]} {
		id = ++gid;
		memcpy(p, s, num);
		// 관찰 메세지
		cout << "ctor [ " << id << "] 주소" << this << endl;
	};

	~STRING() {
		// 관찰메세지
		cout << "dtor [ " << id << "] 주소" << this << endl;
		delete[] p;
	}


	friend ostream& operator<<(ostream&, const STRING&);

};

int STRING::gid{};

ostream& operator<<(ostream& os, const STRING& STRING)
{
	os << STRING.p;
	return os;
}

int main()
{
	cout << sizeof(STRING) << endl;
	STRING a{ "2022 3 24" };
	STRING b{ "STL STRING 작성 시작" };
	cout << a << endl;
	cout << b << endl;
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 1608

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num; //4(8) - padding
	char* p; //8
	int id;  //4(8)
	static int gid;
public:
	explicit STRING() {};
	STRING(const char* s) : num{ strlen(s) }, id{ ++gid } {
		// 기존에 num { strlen(s) }는 4바이트에 8바이트를 넣으려함 (축소변환)

		p = new char[num];
		memcpy(p, s, num);

		if (관찰)
			print("생성자(*)");
	};

	~STRING() {
		if (관찰)
			print("소멸자");
		if (num)
			delete[] p;
	}

	void print(const char* s) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}
	
	friend ostream& operator<<(ostream&, const STRING&);

};

int STRING::gid{};

ostream& operator<<(ostream& os, const STRING& s)
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
}

int main()
{
	cout << sizeof(STRING) << endl;
	
	STRING a{ "2022 3 24" };
	STRING b{ "STL STRING 작성 시작" };
	cout << a << endl;
	cout << b << endl;
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 1608

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 1일)
//
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

bool 관찰{ true };

class STRING {
	size_t num; //4(8) - padding
	char* p; //8
	int id;  //4(8)
	static int gid;
public:
	explicit STRING() {};
	STRING(const char* s) : num{ strlen(s) }, id{ ++gid } {
		// 기존에 num { strlen(s) }는 4바이트에 8바이트를 넣으려함 (축소변환)
		// , 연산자는 순서를 알 수 없음

		p = new char[num];
		memcpy(p, s, num);

		if (관찰)
			print("생성자(*)");
	};

	~STRING() {
		if (관찰)
			print("소멸자");
		if (num)
			delete[] p;
	}

	void print(const char* s) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}
	
	friend ostream& operator<<(ostream&, const STRING&);

};

int STRING::gid{};

ostream& operator<<(ostream& os, const STRING& s)
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
}

int main()
{
	
	STRING a{ "2022 3 24" };
	STRING b{ "STL STRING 작성 시작" };
	cout << a << endl;
	cout << b << endl;
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 2080

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 2일)
//
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;	// 관리하는 자원 수
	char* p;	// 자원의 주소
	int id;		// 생성 시 부여한 고유값
	static int gid; // id 생성용
public:
	explicit STRING() : num{}, p{}, id{ ++gid } {
		if (관찰)
			print("디폴트");
	};
	STRING(const char* s) : num{ strlen(s) }, id{ ++gid } {
		// 기존에 num { strlen(s) }는 4바이트에 8바이트를 넣으려함 (축소변환)
		// , 연산자는 순서를 알 수 없음

		p = new char[num];
		memcpy(p, s, num);

		if (관찰)
			print("생성자(*)");
	};

	~STRING() {
		if (관찰)
			print("소멸자");
		if (num)
			delete[] p;
	}

	STRING& operator=(const STRING& a) {
		
	}

	void print(const char* s) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}
	
	STRING operator+(const STRING& rhs) const {
		STRING temp; // 임시객체 만들어 더한 후 리턴
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];
		memcpy(temp.p, p, num);
		memcpy(temp.p + num, rhs.p, rhs.num);
		temp.id = ++gid;
		return temp;
	}

	friend ostream& operator<<(ostream&, const STRING&);
};

int STRING::gid{};

ostream& operator<<(ostream& os, const STRING& s)
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
}


int main()
{
	관찰 = true;

	STRING a{ "2022년" };
	STRING b{ "3 30일" };
	//STRING c = a + b;

	cout << a << endl;
	cout << b << endl;
	cout << a + b << endl;
	
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 2387

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 2일)
//
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;	// 관리하는 자원 수
	char* p;	// 자원의 주소
	int id;		// 생성 시 부여한 고유값
	static int gid; // id 생성용
public:
	explicit STRING() : num{}, p{}, id{ ++gid } {
		if (관찰)
			print("디폴트");
	};
	STRING(const char* s) : num{ strlen(s) }, id{ ++gid } {
		// 기존에 num { strlen(s) }는 4바이트에 8바이트를 넣으려함 (축소변환)
		// , 연산자는 순서를 알 수 없음

		p = new char[num];
		memcpy(p, s, num);

		if (관찰)
			print("생성자(*)");
	};

	~STRING() {
		if (관찰)
			print("소멸자");
		if (num)
			delete[] p;
	}

	STRING(const STRING& other) : id{ ++gid }, num{other.num} {
		p = new char[num];
		memcpy(p, other.p, num);
		if (관찰)
			print("복사생성");
	}

	STRING& operator=(const STRING& other) {
		if (this == &other)
			return *this;
		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy(p, other.p, num);

		if (관찰)
			print("복사할당");
	}

	void print(const char* s) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}
	
	STRING operator+(const STRING& rhs) const {
		STRING temp; // 임시객체 만들어 더한 후 리턴
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];
		memcpy(temp.p, p, num);
		memcpy(temp.p + num, rhs.p, rhs.num);
		return temp;
	}

	friend ostream& operator<<(ostream&, const STRING&);
};

int STRING::gid{};

ostream& operator<<(ostream& os, const STRING& s)
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
}


int main()
{
	관찰 = true;

	STRING a{ "2022년" };
	STRING b{ "3 30일" };
	STRING c = a + b;

	cout << a << endl;
	cout << b << endl;
	cout << c << endl;
	
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 2384

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 2일)
//
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;	// 관리하는 자원 수
	char* p;	// 자원의 주소
	int id;		// 생성 시 부여한 고유값
	static int gid; // id 생성용
public:
	explicit STRING() : num{}, p{}, id{ ++gid } {
		if (관찰)
			print("디폴트");
	};
	STRING(const char* s) : num{ strlen(s) }, id{ ++gid } {
		// 기존에 num { strlen(s) }는 4바이트에 8바이트를 넣으려함 (축소변환)
		// , 연산자는 순서를 알 수 없음

		p = new char[num];
		memcpy(p, s, num);

		if (관찰)
			print("생성자(*)");
	};

	~STRING() {
		if (관찰)
			print("소멸자");
		if (num)
			delete[] p;
	}

	STRING(const STRING& other) : id{ ++gid }, num{other.num} {
		p = new char[num];
		memcpy(p, other.p, num);
		if (관찰)
			print("복사생성");
	}

	STRING& operator=(const STRING& other) {
		if (this == &other)
			return *this;
		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy(p, other.p, num);

		if (관찰)
			print("복사할당");
	}

	void print(const char* s) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}
	
	STRING operator+(const STRING& rhs) const {
		STRING temp; // 임시객체 만들어 더한 후 리턴
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];
		memcpy(temp.p, p, num);
		memcpy(temp.p + num, rhs.p, rhs.num);
		return temp;
	}

	friend ostream& operator<<(ostream&, const STRING&);
};

int STRING::gid{};

ostream& operator<<(ostream& os, const STRING& s)
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
}


int main()
{
	관찰 = true;

	STRING a{ "2022년" };
	STRING b{ "3 30일" };
	STRING c = a ;

	cout << a << endl;
	cout << b << endl;
	cout << c << endl;
	
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 2451

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 2일)
//
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
// 
// 컴파일러 최적화 - RVO(리턴시 복사생성x), copy ellision
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;	// 관리하는 자원 수
	char* p;	// 자원의 주소
	int id;		// 생성 시 부여한 고유값
	static int gid; // id 생성용
public:
	explicit STRING() : num{}, p{}, id{ ++gid } {
		if (관찰)
			print("디폴트");
	};
	STRING(const char* s) : num{ strlen(s) }, id{ ++gid } {
		// 기존에 num { strlen(s) }는 4바이트에 8바이트를 넣으려함 (축소변환)
		// , 연산자는 순서를 알 수 없음

		p = new char[num];
		memcpy(p, s, num);

		if (관찰)
			print("생성자(*)");
	};

	~STRING() {
		if (관찰)
			print("소멸자");
		if (num)
			delete[] p;
	}

	STRING(const STRING& other) : id{ ++gid }, num{other.num} {
		p = new char[num];
		memcpy(p, other.p, num);
		if (관찰)
			print("복사생성");
	}

	STRING& operator=(const STRING& other) {
		if (this == &other)
			return *this;
		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy(p, other.p, num);

		if (관찰)
			print("복사할당");
	}

	void print(const char* s) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}
	
	STRING operator+(const STRING& rhs) const {
		STRING temp; // 임시객체 만들어 더한 후 리턴
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];
		memcpy(temp.p, p, num);
		memcpy(temp.p + num, rhs.p, rhs.num);
		return temp;
	}

	friend ostream& operator<<(ostream&, const STRING&);
};

int STRING::gid{};

ostream& operator<<(ostream& os, const STRING& s)
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
}


int main()
{
	관찰 = true;

	STRING a{ "2022년" };
	STRING b{ "3 30일" };
	STRING c = a + b;

	cout << a << endl;
	cout << b << endl;
	cout << c << endl;
	
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 618

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 2일)
//
// 클래스 파일 분리
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다


int main()
{
	cout << STRING{ "123" } + STRING{ "456" } << endl;
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 660

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 2일)
//
// 클래스 파일 분리
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다


int main()
{
	cout << STRING{ "123" } + STRING{ "456" } << endl;
	save("소스.cpp");
	save("STRING.cpp");
	save("STRING.h");
}


파일이름: STRING.cpp
파일크기: 1863

//-----------------------------------------------------------------------------
// STRING - STL 내부 동작을 관찰하려고 만든 자원을 관리하는 클래스
//        - std::string 동작 대부분을 직접 구현하며 STL 동작방식을 이해
// 
// 2022.3.30
//-----------------------------------------------------------------------------

#include <iostream>
#include "STRING.h"


bool 관찰{ false }; // 관찰하려면 true로
int STRING::gid{}; // class static

STRING::STRING() : num{}, p{}, id{ ++gid } {
	if (관찰)
		print("디폴트");
};
STRING::STRING(const char* s) : num{ strlen(s) }, id{ ++gid } {
	// 기존에 num { strlen(s) }는 4바이트에 8바이트를 넣으려함 (축소변환)
	// , 연산자는 순서를 알 수 없음

	p = new char[num];
	memcpy(p, s, num);

	if (관찰)
		print("생성자(*)");
};

STRING::~STRING() {
	if (관찰)
		print("소멸자");
	if (num)
		delete[] p;
}

STRING::STRING(const STRING& other) : id{ ++gid }, num{ other.num } {
	p = new char[num];
	memcpy(p, other.p, num);
	if (관찰)
		print("복사생성");
}

STRING& STRING::operator=(const STRING& other) {
	if (this == &other)
		return *this;
	if (num)
		delete[] p;

	num = other.num;
	p = new char[num];
	memcpy(p, other.p, num);

	if (관찰)
		print("복사할당");
}

STRING STRING::operator+(const STRING& rhs) const {
	STRING temp; // 임시객체 만들어 더한 후 리턴
	temp.num = num + rhs.num;
	temp.p = new char[temp.num];
	memcpy(temp.p, p, num);
	memcpy(temp.p + num, rhs.p, rhs.num);
	return temp;
}

void STRING::print(const char* s) const {
	std::cout << s << " [" << id << "] 객체:" << this;
	if (num)
		std::cout << " - 자원:" << num << " 주소" << (void*)p;
	else
		std::cout << " - 자원없음";
	std::cout << std::endl;
}

std::ostream& operator<<(std::ostream& os, const STRING& s)
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
}

파일이름: STRING.h
파일크기: 791

//-----------------------------------------------------------------------------
// STRING - STL 내부 동작을 관찰하려고 만든 자원을 관리하는 클래스
//        - std::string 동작 대부분을 직접 구현하며 STL 동작방식을 이해
// 
// 2022.3.30
//-----------------------------------------------------------------------------


#pragma once

#include <iostream>

class STRING {
	size_t num;	// 관리하는 자원 수
	char* p;	// 자원의 주소
	int id;		// 생성 시 부여한 고유값
	static int gid; // id 생성용
public:
	STRING();
	STRING(const char* s);
	~STRING();
	STRING(const STRING& other);
	STRING& operator=(const STRING& other);

	STRING operator+(const STRING& rhs) const;
	void print(const char* s) const;

	friend std::ostream& operator<<(std::ostream&, const STRING&);
};

파일이름: 소스.cpp
파일크기: 654

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 2일)
//
// 클래스 파일 분리
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{
	관찰 = true;

	cout << STRING{ "123" } + STRING{ "456" } << endl;
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 761

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 2일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{
	array<STRING, 3> a{ "2022년","3월","30일"};
	for (int i{}; i < a.size(); ++i) {
		cout << a[i] << endl;
	}
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 742

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 2일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{
	array<STRING, 3> a{ "2022년","3월","30일"};
	for (auto x : a) {
		cout << x << endl;
	}
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 757

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 2일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{
	관찰 = true;
	array<STRING, 3> a{ "2022년","3월","30일"};
	for (auto x : a) {
		cout << x << endl;
	}
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 758

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 2일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{
	관찰 = true;
	array<STRING, 3> a{ "2022년","3월","30일"};
	for (auto& x : a) {
		cout << x << endl;
	}
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 766

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 2일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{
	관찰 = true;
	array<STRING, 3> a{ "2022년","3월","30일"};
	for (const STRING& x : a) {
		cout << x << endl;
	}
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 926

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 2일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{
	관찰 = true;
	array<STRING, 3> a{ "2022년","3월","30일"};

	// 길이 오름차순으로 a를 정렬하라
	sort(a.begin(), a.end(), [](STRING a, STRING b) {
		return a.getNum() < b.getNum();
		});



	for (const STRING& x : a) {
		cout << x << endl;
	}
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 928

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(4주 2일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{
	관찰 = true;
	array<STRING, 3> a{ "2022년","3월","30일"};

	// 길이 오름차순으로 a를 정렬하라
	sort(a.begin(), a.end(), [](STRING& a, STRING& b) {
		return a.getNum() < b.getNum();
		});



	for (const STRING& x : a) {
		cout << x << endl;
	}
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 783

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 1일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{	
	// 자료구조
	array<int, 10> a{ 1,3,5,7,9,2,4,6,8,10 };

	array<int, 10>::iterator p = a.begin();
	++p;
	*p;
	p != a.end();

	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 826

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 1일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{	
	// 자료구조
	array<int, 10> a{ 1,3,5,7,9,2,4,6,8,10 };

	for (array<int, 10>::iterator i{ a.begin() }; i != a.end(); ++i) {
		cout << *i << ' ';
	}
	cout << endl;
	

	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 833

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 1일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{	
	// 자료구조
	array<int, 10> a{ 1,3,5,7,9,2,4,6,8,10 };

	// 이해한 후 auto 써도됨
	for (auto i{ a.begin() }; i != a.end(); ++i) {
		cout << *i << ' ';
	}
	cout << endl;
	

	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 834

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 1일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{	
	// 자료구조
	array<int, 10> a{ 1,3,5,7,9,2,4,6,8,10 };

	for (array<int, 10>::reverse_iterator i{ a.rbegin() }; i != a.rend(); ++i)
		cout << *i << ' ';
		
	cout << endl;
	

	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 809

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 1일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{	
	// 자료구조
	array<int, 10> a{ 1,3,5,7,9,2,4,6,8,10 };
	
	for (auto i{ a.crbegin() }; i != a.crend(); ++i)
		cout << *i << ' ';
		
	cout << endl;
	

	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 855

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 1일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{	
	// 자료구조
	array<int, 10> a{ 1,3,5,7,9,2,4,6,8,10 };
	
	save("소스.cpp");

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;
		cout << num << "번째 값은 - " << a.at(num) << endl;
	}
}


파일이름: 소스.cpp
파일크기: 931

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 1일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{	
	// 자료구조
	array<int, 10> a{ 1,3,5,7,9,2,4,6,8,10 };
	
	save("소스.cpp");

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;
		try {
			cout << num << "번째 값은 - " << a.at(num) << endl;
		}
		catch (exception& e) {
			cout << e.what() << endl;
		}
	}
}


파일이름: 소스.cpp
파일크기: 941

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 1일)
//
// 클래스 파일 분리
// 컨테이너는 다른 오브젝트를 가지는 오브젝트
//------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{	
	// 자료구조
	array<int, 10> a{ 1,3,5,7,9,2,4,6,8,10 };
	
	save("소스.cpp");

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;
		try {
			cout << num << "번째 값은 - " << a.at(num) << endl;
		}
		catch (exception& e) {
			cout << "유효범위는 0 ~ 4" << endl;
		}
	}
}


파일이름: 소스.cpp
파일크기: 843

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 1일)
//
// 
// 1. Sequence container
//		array			- 유일하게 크기가 고정, []대체
//		vector
//		deque
//		forward_list
//		list
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

// 앞으로 사용할 class STRING 작성 시작(RAII)
//[문제] main()이 문제없이 실행되게 하자
//관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
//객체가 생성될때마다 고유번호를 준다

extern bool 관찰;

int main()
{	
	vector<char> v;

	v.push_back('S');
	v.push_back('T');
	v.push_back('L');

	for (char i : v) {
		cout << i << endl;
	}

	save("소스.cpp");
	
}


파일이름: 소스.cpp
파일크기: 757

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 1일)
//
// 
// 1. Sequence container
//		array			- 유일하게 크기가 고정, []대체
//		vector
//		deque
//		forward_list
//		list
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] '소스.cpp'를 vector에 공백까지 전부 저장하라
// 화면에 출력하라

extern bool 관찰;

int main()
{	
	ifstream in{ "소스.cpp" };

	vector<char> v{ istreambuf_iterator<char> {in},{} };

	for (char c : v) {
		cout << c;
	}


	

	save("소스.cpp");
	
}


파일이름: 소스.cpp
파일크기: 811

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 1일)
//
// 
// 1. Sequence container
//		array			- 유일하게 크기가 고정, []대체
//		vector
//		deque
//		forward_list
//		list
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 단어를 키보드에서 입력받아
// 오름차순 정렬한 후
// 화면에 출력하라
extern bool 관찰;

int main()
{	
	vector<string> v;

	save("소스.cpp");

	string str;
	while (cin >> str) {
		v.push_back(str);

		sort(v.begin(), v.end());

		for (string s : v)
			cout << s << endl;
	}

	
}


파일이름: 소스.cpp
파일크기: 840

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 1일)
//
// 
// 1. Sequence container
//		array			- 유일하게 크기가 고정, []대체
//		vector
//		deque
//		forward_list
//		list
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 단어를 키보드에서 입력받아
// 오름차순 정렬한 후
// 화면에 출력하라
extern bool 관찰;

int main()
{	
	vector<string> v;

	save("소스.cpp");

	string str;
	while (cin >> str) {
		v.push_back(str);

		sort(v.begin(), v.end());
		// ctrl + z + enter - 입력 중지
	}
	for (string s : v)
		cout << s << endl;
	
}


파일이름: 소스.cpp
파일크기: 837

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 1일)
//
// 
// 1. Sequence container
//		array			- 유일하게 크기가 고정, []대체
//		vector
//		deque
//		forward_list
//		list
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 단어를 키보드에서 입력받아
// 오름차순 정렬한 후
// 화면에 출력하라
extern bool 관찰;

int main()
{	
	vector<string> v;

	save("소스.cpp");

	string str;
	while (cin >> str) 
		v.push_back(str);
		// ctrl + z + enter - 입력 중지
	
	sort(v.begin(), v.end());

	for (string s : v)
		cout << s << endl;
	
}


파일이름: 소스.cpp
파일크기: 731

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 2일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 키보드에서 int를 그만 할때까지 입력받아라
// 합계와 평균을 화면 출력하라.

extern bool 관찰;

int main()
{	
	vector<int> v_i;
	long long sum{};
	

	int input;
	while (cin >> input) 
		v_i.push_back(input);
	
	for (int n : v_i) 
		sum += n;
	

	cout << "합계: " << sum << endl;
	cout << "평균: " << (double)sum / v_i.size() << endl;

	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 582

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 2일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 키보드에서 int를 그만 할때까지 입력받아라
// 합계와 평균을 화면 출력하라.

extern bool 관찰;

int main()
{	
	vector<int> v_i;
	long long sum{};
	
	cout << "int 수: " << v_i.max_size() << endl;
// v_i에 최대로 담을 수 있는 수

	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 588

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 2일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 키보드에서 int를 그만 할때까지 입력받아라
// 합계와 평균을 화면 출력하라.

extern bool 관찰;

int main()
{	
	vector<STRING> v_i;
	long long sum{};
	
	cout << "STRING 수: " << v_i.max_size() << endl;

	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 584

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 2일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 키보드에서 int를 그만 할때까지 입력받아라
// 합계와 평균을 화면 출력하라.

extern bool 관찰;

int main()
{	
	vector<int> v {1,2,3};
	cout << "벡터가 메모리는 차지하는 바이트 수" <<sizeof(v) << endl;
	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 695

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 2일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 키보드에서 int를 그만 할때까지 입력받아라
// 합계와 평균을 화면 출력하라.

extern bool 관찰;

int main()
{	
	vector<int> v {1,2,3};
	
	cout << "원소 수 - " << v.size() << endl;
	cout << "데이터 위치 - " << v.data() << endl;
	cout << "용량(재할당없이 저장할 수 있는 원소 수) - " << v.capacity() << endl;


	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 905

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 2일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 키보드에서 int를 그만 할때까지 입력받아라
// 합계와 평균을 화면 출력하라.

extern bool 관찰;

int main()
{	
	vector<int> v {1,2,3};
	
	cout << "원소 수 - " << v.size() << endl;
	cout << "데이터 위치 - " << v.data() << endl;
	cout << "용량(재할당없이 저장할 수 있는 원소 수) - " << v.capacity() << endl;

	v.push_back(4);

	cout << endl;
	cout << "원소 수 - " << v.size() << endl;
	cout << "데이터 위치 - " << v.data() << endl;
	cout << "용량(재할당없이 저장할 수 있는 원소 수) - " << v.capacity() << endl;


	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 907

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 2일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 키보드에서 int를 그만 할때까지 입력받아라
// 합계와 평균을 화면 출력하라.

extern bool 관찰;

int main()
{	
	vector<int> v {1,2,3,4};
	
	cout << "원소 수 - " << v.size() << endl;
	cout << "데이터 위치 - " << v.data() << endl;
	cout << "용량(재할당없이 저장할 수 있는 원소 수) - " << v.capacity() << endl;

	v.push_back(4);

	cout << endl;
	cout << "원소 수 - " << v.size() << endl;
	cout << "데이터 위치 - " << v.data() << endl;
	cout << "용량(재할당없이 저장할 수 있는 원소 수) - " << v.capacity() << endl;


	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 1117

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 2일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] 키보드에서 int를 그만 할때까지 입력받아라
// 합계와 평균을 화면 출력하라.

extern bool 관찰;

int main()
{	
	vector<int> v {1,2,3,4};
	
	cout << "원소 수 - " << v.size() << endl;
	cout << "데이터 위치 - " << v.data() << endl;
	cout << "용량(재할당없이 저장할 수 있는 원소 수) - " << v.capacity() << endl;

	v.push_back(4);

	cout << endl;
	cout << "원소 수 - " << v.size() << endl;
	cout << "데이터 위치 - " << v.data() << endl;
	cout << "용량(재할당없이 저장할 수 있는 원소 수) - " << v.capacity() << endl;

	v.push_back(5);

	cout << endl;
	cout << "원소 수 - " << v.size() << endl;
	cout << "데이터 위치 - " << v.data() << endl;
	cout << "용량(재할당없이 저장할 수 있는 원소 수) - " << v.capacity() << endl;


	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 731

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 2일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	vector<int> v;

	save("소스.cpp");

	size_t old{ v.capacity() };
	while (true) {

		v.push_back(1);

		if (old == v.size() - 1) {
			cout << "원소 수 - " << v.size() << endl;
			cout << "용량 - " << v.capacity() << endl;
			old = v.capacity();
		}

	}
	

}


파일이름: 소스.cpp
파일크기: 543

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 2일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	관찰 = true;
	vector<STRING> v;

	new STRING{ "12345" };

	save("소스.cpp");

}


파일이름: 소스.cpp
파일크기: 532

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 2일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	관찰 = true;
	vector<STRING> v{ "12345" };

	

	save("소스.cpp");

}

파일이름: 소스.cpp
파일크기: 560

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 2일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	관찰 = true;
	vector<STRING> v{ "12345" };

	v.push_back("1234567");

	

	save("소스.cpp");

}


파일이름: 소스.cpp
파일크기: 563

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 2일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	관찰 = true;
	vector<STRING> v{ "12345" };

	v.emplace_back("1234567");

	

	save("소스.cpp");

}


파일이름: 소스.cpp
파일크기: 591

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(5주 2일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	관찰 = true;
	vector<STRING> v{ "12345" };

	v.emplace_back("1234567"); // STRING{"1234567"} 사용 x

	

	save("소스.cpp");

}


파일이름: 소스.cpp
파일크기: 640

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 1일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <chrono>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	관찰 = true;
	vector<STRING> v{ "12345" };
	//v.reserve() 벡터 공간 미리 확보

	v.emplace_back("1234567"); // STRING{"1234567"} 사용 x

	
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 596

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 1일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <chrono>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	관찰 = true;
	vector<STRING> v;

	v.push_back("1");
	v.push_back("12");
	v.push_back("123");

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 596

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 1일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <chrono>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	관찰 = true;
	vector<STRING> v;

	v.push_back("1");
	v.push_back("12");
	v.push_back("123");

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 618

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 1일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <chrono>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	관찰 = true;
	vector<STRING> v;

	v.push_back("1");
	v.push_back("12");
	v.push_back("123");

	save("소스.cpp");
	save("STRING.cpp");
}

파일이름: STRING.cpp
파일크기: 2360

//-----------------------------------------------------------------------------
// STRING - STL 내부 동작을 관찰하려고 만든 자원을 관리하는 클래스
//        - std::string 동작 대부분을 직접 구현하며 STL 동작방식을 이해
// 
// 2022.3.30
//-----------------------------------------------------------------------------

#include <iostream>
#include "STRING.h"


bool 관찰{ false }; // 관찰하려면 true로
int STRING::gid{}; // class static

STRING::STRING() : num{}, p{}, id{ ++gid } {
	if (관찰)
		print("디폴트");
};
STRING::STRING(const char* s) : num{ strlen(s) }, id{ ++gid } {
	// 기존에 num { strlen(s) }는 4바이트에 8바이트를 넣으려함 (축소변환)
	// , 연산자는 순서를 알 수 없음

	p = new char[num];
	memcpy(p, s, num);

	if (관찰)
		print("생성자(*)");
};

STRING::~STRING() {
	if (관찰)
		print("소멸자");
	if (num)
		delete[] p;
}

STRING::STRING(const STRING& other) : id{ ++gid }, num{ other.num } {
	p = new char[num];
	memcpy(p, other.p, num);
	if (관찰)
		print("복사생성");
}

STRING& STRING::operator=(const STRING& other) {
	if (this == &other)
		return *this;
	if (num)
		delete[] p;

	num = other.num;
	p = new char[num];
	memcpy(p, other.p, num);

	if (관찰)
		print("복사할당");
}
//2022.4.7 이동생성자/이동할당연산자
STRING::STRING(STRING&& other) noexcept : id{ ++gid }, num{other.num} {
	p = other.p;

	other.num = 0;
	other.p = nullptr;
	
	if (관찰)
		print("이동생성");
}

STRING& STRING::operator=(STRING&& other) noexcept {
	if (this != &other) {
		if (num)
			delete[] p;
		num = other.num;
		p = other.p;

		other.num = 0;
		other.p = nullptr;
	}
	if (관찰)
		print("이동할당");
	return *this;
}


STRING STRING::operator+(const STRING& rhs) const {
	STRING temp; // 임시객체 만들어 더한 후 리턴
	temp.num = num + rhs.num;
	temp.p = new char[temp.num];
	memcpy(temp.p, p, num);
	memcpy(temp.p + num, rhs.p, rhs.num);
	return temp;
}

void STRING::print(const char* s) const {
	std::cout << s << " [" << id << "] 객체:" << this;
	if (num)
		std::cout << " - 자원:" << num << " 주소" << (void*)p;
	else
		std::cout << " - 자원없음";
	std::cout << std::endl;
}

size_t STRING::getNum() {
	return num;
}

std::ostream& operator<<(std::ostream& os, const STRING& s)
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
}

파일이름: 소스.cpp
파일크기: 798

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 1일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	vector<STRING> v{ "1", "333", "22", "55555", "4444" };
	
	//[문제] 길이 오름차순 정렬

	관찰 = true;
	sort(v.begin(), v.end(), [](const STRING& a, const STRING& b) {
		return a.getNum() < b.getNum();
		});
	관찰 = false;

	for (int i{}; i < v.size(); ++i) {
		cout << v[i] << endl;
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 643

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 1일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	vector v = { 1,2,4,5 };

	// [문제] 1, 2 뒤 3을 껴 넣어서 1,2,3,4,5

	v.insert(v.begin() + 2, 3);
	for (int n : v)
		cout << n << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 679

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 1일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	vector v = { 1,2,4,5 };

	// [문제] 1, 2 뒤 3을 껴 넣어서 1,2,3,4,5

	v.insert(v.begin() + 2, 3); // 가능은하나 메모리는 재배열하는 행위(벡터에서의 삽입 등)은 하지않는다.
	

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 694

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 1일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	vector v = { 1,2,4,5,6,7,9,10 };

	// [문제] v에서 짝수를 제거(remove)하라.

	remove(v.begin(), v.end(), 9);


	for (int i{}; i < v.size(); ++i) 
		cout << v[i] << " ";
	cout << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 732

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 1일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	vector v = { 1,2,4,5,6,7,9,10 };

	// [문제] v에서 짝수를 제거(remove)하라.

	remove_if(v.begin(), v.end(), [](int n) {
		return !(n & 1);
		});


	for (int i{}; i < v.size(); ++i) 
		cout << v[i] << " ";
	cout << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 765

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 1일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	vector v = { 1,2,3,4,5,6,7,9,10 };

	// [문제] v에서 짝수를 제거(remove)하라.

	auto p = remove_if(v.begin(), v.end(), [](int n) {
		return !(n & 1);
	});

	v.erase(p, v.end());

	for (int i{}; i < v.size(); ++i) 
		cout << v[i] << " ";
	cout << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 750

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 1일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	vector v = { 1,2,3,4,5,6,7,9,10 };

	// [문제] v에서 짝수를 제거(remove)하라.

	v.erase(remove_if(v.begin(), v.end(), [](int n) {
		return !(n & 1);
		}), v.end());

	for (int i{}; i < v.size(); ++i) 
		cout << v[i] << " ";
	cout << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 648

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 1일)
//
// 
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] v에 원소를 하나씩 추가하며 메모리가 확장되는 모습을 관찰하라

extern bool 관찰;

int main()
{	
	// '소스.cpp'를 읽어서 영문자 갯수를 세라
	// 다음과 같이 출력하자
	// 대소문자는 구분하지 않음
	// [a] - 10
	// [b] - 7
	// ...
	// [z] - 3

	save("소스.cpp");
}



파일이름: 소스.cpp
파일크기: 991

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] '소스.cpp'를 읽어서 영문자 갯수를 세라
// 다음과 같이 출력하자
// 대소문자는 구분하지 않음
// [a] - 10
// [b] - 7
// ...
// [z] - 3

extern bool 관찰;


int main()
{	
	ifstream in{ "소스.cpp" };
	// 여기에 들어갈 코드. z의 갯수를 답지에도 적어라.
	
	char c;
	array<int, 26> arr;
	while (in >> c) {
		if (isalpha(c))
			arr[tolower(c) - 'a']++;
	}

	for (int i{}; i < arr.size(); ++i) {
		cout << '[' << static_cast<char>(i + 'a') << "] - " << arr[i] << endl;
	}


	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 993

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제] '소스.cpp'를 읽어서 영문자 갯수를 세라
// 다음과 같이 출력하자
// 대소문자는 구분하지 않음
// [a] - 10
// [b] - 7
// ...
// [z] - 3

extern bool 관찰;


int main()
{	
	ifstream in{ "소스.cpp" };
	// 여기에 들어갈 코드. z의 갯수를 답지에도 적어라.
	
	char c;
	array<int, 26> arr{};
	while (in >> c) {
		if (isalpha(c))
			arr[tolower(c) - 'a']++;
	}

	for (int i{}; i < arr.size(); ++i) {
		cout << '[' << static_cast<char>(i + 'a') << "] - " << arr[i] << endl;
	}


	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 598

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

//[문제]

extern bool 관찰;


int main()
{	
	vector<STRING> v{ "1", "22", "4444", "55555"};

	for (int i{}; i < v.size(); ++i)
		cout << v[i] << endl;



	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 705

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)



extern bool 관찰;


int main()
{	
	관찰 = true;
	list<STRING> v{ "1", "22", "4444", "55555"};


	// [문제] "22" 와 "4444" 사이에 "333"을 끼워 넣어라.
	
	v.insert(----v.cend(), "333");

	

	for (const STRING&s : v)
		cout << s << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 716

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)



extern bool 관찰;


int main()
{	
	list<STRING> v{ "1", "22", "4444", "55555"};


	// [문제] "22" 와 "4444" 사이에 "333"을 끼워 넣어라.
	관찰 = true;
	v.insert(----v.cend(), "333");
	관찰 = false;
	

	for (const STRING&s : v)
		cout << s << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 560

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)



extern bool 관찰;


int main()
{	
	deque<int> d;

	cout << sizeof(d) << endl;
	

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 590

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)



extern bool 관찰;


int main()
{	
	deque<int> d;
	// 이터레이터(또는 포인터)를 지정할때 벡터와 달리 뜨지않음
	

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 787

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << this << endl;
	}
};


int main()
{	
	// [확인] vector는 연속되어있는데, deque은 메모리가 연속되어 있지 않다?
	vector<Test> v( 10 );
	

	deque<STRING> d;


	for (int i{}; i < v.size(); ++i) {
		v[i].show();
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 799

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[10000];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{	
	// [확인] vector는 연속되어있는데, deque은 메모리가 연속되어 있지 않다?
	vector<Test> v( 10 );
	

	deque<STRING> d;


	for (int i{}; i < v.size(); ++i) {
		v[i].show();
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 778

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1000];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{	
	// [확인] vector는 연속되어있는데, deque은 메모리가 연속되어 있지 않다?
	deque<Test> v( 10 );
	



	for (int i{}; i < v.size(); ++i) {
		v[i].show();
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 786

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1000];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{	
	// [확인] vector는 연속되어있는데, deque은 메모리가 연속되어 있지 않다?
	deque<int> v( 10 );
	



	for (int i{}; i < v.size(); ++i) {
		cout << v[i] << endl;
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 797

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1000];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{	
	// [확인] vector는 연속되어있는데, deque은 메모리가 연속되어 있지 않다?
	deque<int> v( 10 );
	



	for (int i{}; i < v.size(); ++i) {
		cout << addressof(v[i]) << endl;
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 818

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1000];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{	
	// [확인] vector는 연속되어있는데, deque은 메모리가 연속되어 있지 않다?
	deque<int> v( 10 );
	

	v.push_front(333);


	for (int i{}; i < v.size(); ++i) {
		cout << addressof(v[i]) << endl;
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 817

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1000];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{	
	// [확인] vector는 연속되어있는데, deque은 메모리가 연속되어 있지 않다?
	deque<int> v( 10 );
	

	v.push_back(333);


	for (int i{}; i < v.size(); ++i) {
		cout << addressof(v[i]) << endl;
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 735

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{	
	save("소스.cpp");
	// [확인 2] vector보다 deque이 더 많은 원소를 저장한다?
	vector<Test> v;
	while (true) 
		v.push_back( Test{});
	

}

파일이름: 소스.cpp
파일크기: 873

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{	
	save("소스.cpp");
	// [확인 2] vector보다 deque이 더 많은 원소를 저장한다?
	// vector가 저장한 Test 객체 수 - 
	
	vector<Test> v;
	while (true) {
		try {
			v.push_back(Test{});
		}
		catch (exception& e) {
			cout << "벡터 원소 수 - " << v.size() << endl;
		}
	}

}

파일이름: 소스.cpp
파일크기: 894

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{	
	save("소스.cpp");
	// [확인 2] vector보다 deque이 더 많은 원소를 저장한다?
	// vector가 저장한 Test 객체 수 - 17937985
	
	deque<Test> v;
	while (true) {
		try {
			v.push_back(Test{});
		}
		catch (exception& e) {
			cout << "벡터 원소 수 - " << v.size() << endl;
			return 0;
		}
	}

}

파일이름: 소스.cpp
파일크기: 930

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{	
	save("소스.cpp");
	// [확인 2] vector보다 deque이 더 많은 원소를 저장한다?
	// vector가 저장한 Test 객체 수 - 17937985
	// deque이 저장한 Test 객체 수 - 
	
	deque<Test> v;
	while (true) {
		try {
			v.push_back(Test{});
		}
		catch (exception& e) {
			cout << "벡터 원소 수 - " << v.size() << endl;
			return 0;
		}
	}

}

파일이름: 소스.cpp
파일크기: 1037

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{	
	save("소스.cpp");
	// [확인 2] vector보다 deque이 더 많은 원소를 저장한다?
	// vector가 저장한 Test 객체 수 - 17937985
	// deque이 저장한 Test 객체 수 - 확인불가
	// x86
	// vector가 저장한 Test 객체 수 - 17937985
	// deque이 저장한 Test 객체 수 - 확인불가
	
	vector<Test> v;
	while (true) {
		try {
			v.push_back(Test{});
		}
		catch (exception& e) {
			cout << "벡터 원소 수 - " << v.size() << endl;
			return 0;
		}
	}

}

파일이름: 소스.cpp
파일크기: 1034

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{	
	save("소스.cpp");
	// [확인 2] vector보다 deque이 더 많은 원소를 저장한다?
	// vector가 저장한 Test 객체 수 - 17937985
	// deque이 저장한 Test 객체 수 - 확인불가
	// x86
	// vector가 저장한 Test 객체 수 - 699913
	// deque이 저장한 Test 객체 수 - 확인불가
	
	deque<Test> v;
	while (true) {
		try {
			v.push_back(Test{});
		}
		catch (exception& e) {
			cout << "벡터 원소 수 - " << v.size() << endl;
			return 0;
		}
	}

}

파일이름: 소스.cpp
파일크기: 713

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(6주 2일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
//
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{	
	
	//[문제] "소스.cpp"의 단어를 deque에 저장하라.
	// 오름차순으로 정렬하라
	// 출력하라


	
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 815

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque
// list
//------------------------------------------------------------------
#include <iostream>
#include <deque>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{
	//[문제] "소스.cpp"의 단어를 deque에 저장하라.
	// 오름차순으로 정렬하라
	// 출력하라

	ifstream in{ "소스.cpp" };
	deque<string> d;

	string s;
	cout << boolalpha << bool(in >> s) << endl;


	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 948

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque
// list
//------------------------------------------------------------------
#include <iostream>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{
	//[문제] "소스.cpp"의 단어를 deque에 저장하라.
	// 오름차순으로 정렬하라
	// 출력하라

	ifstream in{ "소스.cpp" };
	deque<string> d;

	string s;
	while (in >> s) 
		d.push_back(s);

	sort(d.begin(), d.end()); // 자동 오름차순(ascending order) 정렬

	for (const string& s : d)
		cout << s << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 667

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque
// list
//------------------------------------------------------------------
#include <iostream>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{
	ofstream out{ "연습.txt" };


	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 930

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque
// list
//------------------------------------------------------------------
#include <iostream>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 출력하라


	ifstream in{ "연습.txt" };

	deque<string> d{ istream_iterator<string> {in} , {} };

	sort(d.begin(), d.end());
	// d의 각 string을 오름차순으로 정렬하라


	copy(d.begin(), d.end(), ostream_iterator<string>{cout, "\n"});

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 984

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque
// list
//------------------------------------------------------------------
#include <iostream>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 출력하라


	ifstream in{ "연습.txt" };

	deque<string> d{ istream_iterator<string> {in} , {} };

	sort(d.begin(), d.end());
	// d의 각 string을 오름차순으로 정렬하라
	
	for (string& s : d)
		sort(s.begin(), s.end());


	copy(d.begin(), d.end(), ostream_iterator<string>{cout, "\n"});

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 980

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque
// list
//------------------------------------------------------------------
#include <iostream>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 출력하라


	ifstream in{ "연습.txt" };

	deque<string> d{ istream_iterator<string> {in} , {} };
	// "dynamic"은 몇 번째 단어인가?
	
	auto p = find(d.begin(), d.end(), string{ "dynamic" });

	if (p == d.end())
		cout << "없는 단어" << endl;
	else
		cout << p - d.begin() + 1 << endl;
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 975

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque
// list
//------------------------------------------------------------------
#include <iostream>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show() const {
		cout << (long long)this << endl;
	}
};


int main()
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 출력하라


	ifstream in{ "연습.txt" };

	deque<string> d{ istream_iterator<string> {in} , {} };
	// "dynamic"은 몇 번째 단어인가?
	
	auto p = find(d.begin(), d.end(), string{ "dy" });

	if (p == d.end())
		cout << "없는 단어" << endl;
	else
		cout << p - d.begin() + 1 << endl;
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 736

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque
// list - 객체마다 포인터 2개 사용하여 삽입/삭제 O(1) (메모리를 희생)
//------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 출력하라

	ifstream in{ "연습.txt" };

	list<string> cont;

	cout << sizeof(cont) << endl;

	
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 927

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque
// list - 객체마다 포인터 2개 사용하여 삽입/삭제 O(1) (메모리를 희생)
//------------------------------------------------------------------
#include <iostream>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 출력하라

	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back(s);

	// [문제] 정렬하라
	
	// [문제] 앞에서 부터 10개 단어만 출력하시오
	auto p{ cont.begin() };
	for (int i{}; i < 10; ++i)
		cout << *p++ << endl;

	
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 943

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque
// list - 객체마다 포인터 2개 사용하여 삽입/삭제 O(1) (메모리를 희생)
//------------------------------------------------------------------
#include <iostream>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 출력하라

	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back(s);

	// [문제] 정렬하라
	cont.sort();


	// [문제] 앞에서 부터 10개 단어만 출력하시오
	auto p{ cont.begin() };
	for (int i{}; i < 10; ++i)
		cout << *p++ << endl;

	
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 944

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque
// list - 객체마다 포인터 2개 사용하여 삽입/삭제 O(1) (메모리를 희생)
//------------------------------------------------------------------
#include <iostream>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 출력하라

	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back(s);

	// [문제] 정렬하라
	cont.sort();


	// [문제] 앞에서 부터 10개 단어만 출력하시오
	auto p{ cont.rbegin() };
	for (int i{}; i < 10; ++i)
		cout << *p++ << endl;

	
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 988

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque
// list - 객체마다 포인터 2개 사용하여 삽입/삭제 O(1) (메모리를 희생)
//------------------------------------------------------------------
#include <iostream>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 출력하라

	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back(s);

	// [문제] 정렬하라
	cont.sort(); // 매우 빠름 객체 안 포인터만 움직이기 때문


	// [문제] 앞에서 부터 10개 단어만 출력하시오
	auto p{ cont.rbegin() };
	for (int i{}; i < 10; ++i)
		cout << *p++ << endl;

	
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 992

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque - 
// list - 객체마다 포인터 2개 사용하여 삽입/삭제 O(1) (메모리를 희생)
//------------------------------------------------------------------
#include <iostream>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 출력하라

	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back(s);

	// [문제] 정렬하라
	cont.sort(); // 매우 빠름 객체 안 포인터만 움직이기 때문


	// [문제] 앞에서 부터 10개 단어만 출력하시오
	auto p{ cont.crbegin() };
	for (int i{}; i < 10; ++i)
		cout << *p++ << endl;

	
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1143

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque - 
// list - 객체마다 포인터 2개 사용하여 삽입/삭제 O(1) (메모리를 희생)
//------------------------------------------------------------------
#include <iostream>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 출력하라

	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back(s);

	// [문제] "dinamic"은 몇 번째 단어인가
	auto p = find(cont.begin(), cont.end(), "dynamic");

	if (p == cont.end())
		cout << "없는단어" << endl;
	else {
		int step{};
		auto beg = cont.begin();

		while (true) {
			if (beg == p) {
				cout << step + 1 << "번째 단어입니다." << endl;
				break;
			}
			else {
				++step;
				++beg;
			}
		}
	}
		
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 992

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque - 
// list - 객체마다 포인터 2개 사용하여 삽입/삭제 O(1) (메모리를 희생)
//------------------------------------------------------------------
#include <iostream>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 출력하라

	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back(s);

	// [문제] "dinamic"은 몇 번째 단어인가
	auto p = find(cont.begin(), cont.end(), "dynamic");

	if (p == cont.end())
		cout << "없는단어" << endl;
	else {
		cout << distance(cont.begin(), p) + 1 << endl;
	}
		
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 865

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque - 
// list - 객체마다 포인터 2개 사용하여 삽입/삭제 O(1) (메모리를 희생)
//------------------------------------------------------------------
#include <iostream>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 출력하라

	ifstream in{ "연습.txt" };

	list<char> cont;

	char c;
	while (in >> c)
		cont.push_back(c);

	// [문제] a 가 몇 개 있난 출력

	cout << count(cont.begin(), cont.end(), 'a') << endl;
		
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 950

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(7주 1일)
//
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque - 
// list - 객체마다 포인터 2개 사용하여 삽입/삭제 O(1) (메모리를 희생)
//------------------------------------------------------------------
#include <iostream>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 출력하라

	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back(s);

	// [문제] 글자수가 5개인것만 화면 출력
	
	copy_if(cont.begin(), cont.end(), ostream_iterator<string>{cout, "\n"}, [](const string& s) {
		return s.size() == 5;
		});


	save("소스.cpp");
}
chrono::system_clock::time_point start = chrono::system_clock::now();
chrono::duration<double> sec = chrono::system_clock::now() - start;
	cout << "입력시간 : " << sec.count() << endl;


파일이름: 소스.cpp
파일크기: 690

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 1일)
//
// Sequence container
// 
// array - 유일하게 크기가 고정
// vector - dynamic size array
// deque - 
// list - 객체마다 포인터 2개 사용하여 삽입/삭제 O(1) (메모리를 희생)
// forward list - 
// 
// Associative container
// 
// 
//------------------------------------------------------------------
#include <iostream>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 666

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 
//------------------------------------------------------------------
#include <iostream>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	// 출력 반복자를 통해 반복자가 제공하는 연산을 이해해본다.

	ostream_iterator<char> p{cout};

	*p = 'A';
	++p;
	*p = 'B';

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 667

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 
//------------------------------------------------------------------
#include <iostream>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	// 출력 반복자를 통해 반복자가 제공하는 연산을 이해해본다.

	ostream_iterator<char> p{cout};
	
	p = 'A';
	//++p;
	p = 'B';

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 825

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show(const Iter)
{
	cout << typeid(Iter).name() << endl;
}

int main()
{
	// 반복자를 인자로 받아 어떤 반복자인지 출력해주면 좋겠다.
	// show 함수는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// 선언하고 정의하라

	vector<int> v;

	show(v);

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 831

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(Iter).name() << endl;
}

int main()
{
	// 반복자를 인자로 받아 어떤 반복자인지 출력해주면 좋겠다.
	// show 함수는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// 선언하고 정의하라

	vector<int> v;

	show(v);
	show(1);

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 855

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(Iter).name() << endl;
}

int main()
{
	// 반복자를 인자로 받아 어떤 반복자인지 출력해주면 좋겠다.
	// show 함수는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// 선언하고 정의하라

	vector<int> v;

	//is_iterator
	show(v.begin());
	show(1);

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 880

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	// 반복자를 인자로 받아 어떤 반복자인지 출력해주면 좋겠다.
	// show 함수는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// 선언하고 정의하라

	vector<int> v;

	//is_iterator
	show(v.begin());

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 898

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <array>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	// 반복자를 인자로 받아 어떤 반복자인지 출력해주면 좋겠다.
	// show 함수는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// 선언하고 정의하라

	show(istream_iterator<char>{});
	show(ostream_iterator<char>{cout});

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1080

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <array>
#include <deque>
#include <forward_list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	// 반복자를 인자로 받아 어떤 반복자인지 출력해주면 좋겠다.
	// show 함수는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// 선언하고 정의하라

	show(istream_iterator<char>{});
	show(ostream_iterator<char>{cout});
	show(forward_list<char>::iterator{});
	show(list<char>::iterator{});
	show(deque<char>::iterator{});
	show(vector<char>::iterator{});

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1116

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <array>
#include <deque>
#include <forward_list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	// 반복자를 인자로 받아 어떤 반복자인지 출력해주면 좋겠다.
	// show 함수는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// 선언하고 정의하라

	show(istream_iterator<char>{});
	show(ostream_iterator<char>{cout});
	show(forward_list<char>::iterator{});
	show(list<char>::iterator{});
	show(deque<char>::iterator{});
	show(vector<char>::iterator{});
	show(array<char, 1>::iterator{});

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 744

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <array>
#include <deque>
#include <forward_list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	int* p{};
	show(p);

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 805

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <array>
#include <deque>
#include <forward_list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	STRING s{ "abcdefg" };

	for (char c : s)
		cout << c << endl;
	cout << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 773

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 2일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	string s{ "hello" };

	for (auto i = s.begin(); i != s.end(); ++i)
		cout << *i << " - ";
	cout << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 775

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 2일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	string s{ "hello" };

	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << " - ";
	cout << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 870

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 2일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 역방향반복자 - 반드시 class로 만들어야 한다.
//		++연산이 실제로는 왼쪽으로 가야하기 때문
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	STRING s{ "hello" };

	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << " - ";
	cout << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 870

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 2일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 역방향반복자 - 반드시 class로 만들어야 한다.
//		++연산이 실제로는 왼쪽으로 가야하기 때문
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	STRING s{ "hello" };

	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << " - ";
	cout << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 890

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 2일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 역방향반복자 - 반드시 class로 만들어야 한다.
//		++연산이 실제로는 왼쪽으로 가야하기 때문
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	STRING s{ "hello" };

	for (auto i = s.rbegin(); i != s.rend(); ++i)
		cout << *i << " - ";
	cout << endl;

	save("소스.cpp");
	save("STRING.h");
}

파일이름: STRING.h
파일크기: 1972

//-----------------------------------------------------------------------------
// STRING - STL 내부 동작을 관찰하려고 만든 자원을 관리하는 클래스
//        - std::string 동작 대부분을 직접 구현하며 STL 동작방식을 이해
// 
// 2022.3.30
//-----------------------------------------------------------------------------


#pragma once

#include <iostream>

class STRING_iterator {
	char* p;

public:
	STRING_iterator(char* p) : p{ p } {}
};

//2022.4.27 STRING이 제공할 역방향 반복자
class STRING_reverse_iterator {
	char* p;

public:
	STRING_reverse_iterator(char* p) : p{ p } {}

	STRING_reverse_iterator& operator++() {
		--p;
		return *this;
	}

	char& operator*() const {
		return *(p - 1);
	}

	// <, >, <=, >=, ==, != (관계연산자 6개 , relation operator)
	// 관계연산자는 우주선연산자로 한번에 해결 - C++ 20
	// spaceship operator(three-way comparison operator)
	auto operator<=>(const STRING_reverse_iterator& rhs) const = default;
};

class STRING {
public:
	using reverse_iterator = STRING_reverse_iterator;
	using iterator = STRING_iterator;

private:
	size_t num;	// 관리하는 자원 수
	char* p;	// 자원의 주소
	int id;		// 생성 시 부여한 고유값
	static int gid; // id 생성용
public:
	STRING();
	STRING(const char* s);
	~STRING();

	STRING(const STRING& other);
	STRING& operator=(const STRING& other);

	//2022.4.7 이동생성자/이동할당연산자
	STRING(STRING&& other) noexcept;
	STRING& operator=(STRING&& other) noexcept;

	STRING operator+(const STRING& rhs) const;
	
	//2022.4.21 begin(), end() 제공
	iterator begin() const {
		return iterator{ p };
	}

	iterator end() const {
		return iterator{ p + num };
	}

	reverse_iterator rbegin() {
		return reverse_iterator{ p + num };
	}

	reverse_iterator rend() {
		return reverse_iterator{ p };
	}
	


	size_t getNum() const ;

	void print(const char* s) const;

	friend std::ostream& operator<<(std::ostream&, const STRING&);
};

파일이름: 소스.cpp
파일크기: 886

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 2일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 역방향반복자 - 반드시 class로 만들어야 한다.
//		++연산이 실제로는 왼쪽으로 가야하기 때문
// 
// 목표 
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	string s{ "The quick brown fox jumps over the lazy dog" };

	sort(s.begin(), s.end());

	cout << s << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 932

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(8주 2일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 역방향반복자 - 반드시 class로 만들어야 한다.
//		++연산이 실제로는 왼쪽으로 가야하기 때문
// 
// 목표 
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	string s{ "the quick brown fox jumps over the lazy dog" };

	sort(s.begin(), s.end());
	s.erase(unique(s.begin(), s.end()), s.end());
	cout << s << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 934

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 역방향반복자 - 반드시 class로 만들어야 한다.
//		++연산이 실제로는 왼쪽으로 가야하기 때문
// 
// 목표 
// 
//------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	ifstream in{ "소스.cpp" };

	
	// [문제] 실행되게 하시오.
	vector<STRING> v{ istream_iterator<STRING>{in}, {} };

	for (auto s : v)
		cout << s << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 992

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 역방향반복자 - 반드시 class로 만들어야 한다.
//		++연산이 실제로는 왼쪽으로 가야하기 때문
// 
// 목표 
// 
//------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	ifstream in{ "소스.cpp" };

	
	// [문제] 실행되게 하시오.
	vector<STRING> v{ istream_iterator<STRING>{in}, {} };

	// [문제] v를 정렬하라.

	sort(v.begin(), v.end());

	for (auto s : v)
		cout << s << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1098

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 역방향반복자 - 반드시 class로 만들어야 한다.
//		++연산이 실제로는 왼쪽으로 가야하기 때문
// 
// 목표 
// 
//------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	ifstream in{ "소스.cpp" };

	
	// [문제] 실행되게 하시오.
	vector<STRING> v{ istream_iterator<STRING>{in}, {} };

	// [문제] v를 정렬하라. 람다에서 오름차순

	sort(v.begin(), v.end(), [](const STRING& lhs, const STRING& rhs) {
		return lhs.getNum() < rhs.getNum();
		});

	for (auto s : v)
		cout << s << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1157

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 1일)
//
// 1.Sequence container
// 2.Associative container
// 
// Iterator - 
// 
// 역방향반복자 - 반드시 class로 만들어야 한다.
//		++연산이 실제로는 왼쪽으로 가야하기 때문
// 
// 목표 
// 
//------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class Iter>
void show( Iter)
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name() << endl;
}

int main()
{
	ifstream in{ "소스X.cpp" };

	
	// [문제] 실행되게 하시오.
	vector<STRING> v{ istream_iterator<STRING>{in}, {} };

	sort(v.begin(), v.end(), [](const STRING& lhs, const STRING& rhs) {
		return lhs.getNum() < rhs.getNum();
		});

	// [문제] v의 각 원소를 오름차순으로 정렬하라.

	for (STRING& s : v)
		sort(s.begin(), s.end());

	for (auto s : v)
		cout << s << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 944

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 2일)
//
// 오늘 알아볼 것
// - 제네릭 프로그래밍의 재미
//------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;


int main()
{	
	save("소스.cpp");

	// [문제] 아무 단어나 입력받자.
	// 그 단어에서 첫 대문자 위치를 리턴하라


	while (true) {
		cout << "단어를 입력하세요." << endl;
		STRING s; // loop optimization 자동으로 바깥으로 빼줌
		cin >> s;

		auto p = find_if(s.begin(), s.end(), [](char c) {
			return isupper(c);
			});
		if (p == s.end())
			cout << "대문자가 없다." << endl;
		else
			cout << distance(s.begin(), p) + 1 << "에 대문자 발견" << endl;

	}
}

파일이름: 소스.cpp
파일크기: 1116

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 2일)
//
// 오늘 알아볼 것
// - 제네릭 프로그래밍의 재미
//------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;


template<class Iter, class Func> // Func - Callable type
Iter myfind_if(Iter beg, Iter end, Func f) 
{
	while (beg != end) {
		if (f(*beg))
			break;
		++beg;
	}
	return beg;
}

int main()
{	
	save("소스.cpp");

	// [문제] 아무 단어나 입력받자.
	// 그 단어에서 첫 대문자 위치를 리턴하라


	while (true) {
		cout << "단어를 입력하세요." << endl;
		STRING s; // loop optimization 자동으로 바깥으로 빼줌
		cin >> s;

		auto p = myfind_if(s.begin(), s.end(), [](char c) {
			return isupper(c);
			});
		if (p == s.end())
			cout << "대문자가 없다." << endl;
		else
			cout << distance(s.begin(), p) + 1 << "에 대문자 발견" << endl;

	}
}

파일이름: 소스.cpp
파일크기: 1208

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 2일)
//
// 오늘 알아볼 것
// - 제네릭 프로그래밍의 재미
//------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;


template<class Iter, class Func> // Func - Callable type
Iter myfind_if(Iter beg, Iter end, Func f) 
{
	while (beg != end) {
		if (f(*beg))
			break;
		++beg;
	}
	return beg;
}



int main()
{	
	save("소스.cpp");

	// [문제] 아무 단어나 입력받자.
	// 그 단어에서 첫 대문자 위치를 리턴하라


	while (true) {
		cout << "단어를 입력하세요." << endl;
		STRING s; // loop optimization 자동으로 바깥으로 빼줌
		cin >> s;

		auto p = myfind_if(s.begin(), s.end(), [](char c) {
			return isupper(c);
			});
		// function<bool(char)> 방식이었음
		// 람다로 만들면 컴파일러가 람다 클래스를 만듦
		if (p == s.end())
			cout << "대문자가 없다." << endl;
		else
			cout << distance(s.begin(), p) + 1 << "에 대문자 발견" << endl;

	}
}

파일이름: 소스.cpp
파일크기: 660

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 2일)
//
// 오늘 알아볼 것
// - 제네릭 프로그래밍의 재미
//------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{	
	save("소스.cpp");

	// [문제] 키보드에서 입력한 글자를 모니터에 출력하라.
	// copy 알고리즘을 사용할 것
	
		
	copy(istream_iterator<char>{cin}, {}, ostream_iterator<char>{cout, "-"});
	
}

파일이름: 소스.cpp
파일크기: 817

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 2일)
//
// 오늘 알아볼 것
// - 제네릭 프로그래밍의 재미
//------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class SrcIter, class DesIter>
void my_copy(SrcIter beg, SrcIter end, DesIter d) {
	while (beg != end) {
		*d = *beg;
		++beg;
		++d;
	}
}

int main()
{	
	save("소스.cpp");

	// [문제] 키보드에서 입력한 글자를 모니터에 출력하라.
	// copy 알고리즘을 사용할 것
	
		
	my_copy(istream_iterator<char>{cin}, {}, ostream_iterator<char>{cout, "-"});
}

파일이름: 소스.cpp
파일크기: 859

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 2일)
//
// 오늘 알아볼 것
// - 제네릭 프로그래밍의 재미
//------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class SrcIter, class DesIter>
void my_copy(SrcIter beg, SrcIter end, DesIter d) {
	while (beg != end) {
		*d = *beg;
		++beg;
		++d;
	}
}

int main()
{	
	save("소스.cpp");

	// [문제] 키보드에서 입력한 글자를 벡터에 저장하라.
	// copy 알고리즘을 사용할 것
	vector<char> v;
	v.reserve(50);
	my_copy(istream_iterator<char>{cin}, {}, v.begin());


	for (char c : v)
		cout << c << "-";
	cout << endl;
}

파일이름: 소스.cpp
파일크기: 891

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 2일)
//
// 오늘 알아볼 것
// - 제네릭 프로그래밍의 재미
//------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class SrcIter, class DesIter>
void my_copy(SrcIter beg, SrcIter end, DesIter d) {
	while (beg != end) {
		*d = *beg;
		++beg;
		++d;
	}
}

int main()
{	
	save("소스.cpp");

	// [문제] 키보드에서 입력한 글자를 벡터에 저장하라.
	// copy 알고리즘을 사용할 것
	vector<char> v;
	v.reserve(50);
	my_copy(istream_iterator<char>{cin}, {}, v.begin());


	for (char c : v) // 메모리는 들어가나 size가 0임
		cout << c << "-";
	cout << endl;
}

파일이름: 소스.cpp
파일크기: 875

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 2일)
//
// 오늘 알아볼 것
// - 제네릭 프로그래밍의 재미
//------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class SrcIter, class DesIter>
void my_copy(SrcIter beg, SrcIter end, DesIter d) {
	while (beg != end) {
		*d = *beg;
		++beg;
		++d;
	}
}

int main()
{	
	save("소스.cpp");

	// [문제] 키보드에서 입력한 글자를 벡터에 저장하라.
	// copy 알고리즘을 사용할 것
	vector<char> v;
	v.reserve(50);
	my_copy(istream_iterator<char>{cin}, {}, v.begin());


	for (int i = 0; i < 100; ++i)
		cout << v[i] << "-";
	cout << endl;
}

파일이름: 소스.cpp
파일크기: 933

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 2일)
//
// 오늘 알아볼 것
// - 제네릭 프로그래밍의 재미
//------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class SrcIter, class DesIter>
void my_copy(SrcIter beg, SrcIter end, DesIter d) {
	while (beg != end) {
		*d = *beg;
		++beg;
		++d;
	}
}

int main()
{	
	save("소스.cpp");

	// [문제] 키보드에서 입력한 글자를 벡터에 저장하라.
	// copy 알고리즘을 사용할 것
	vector<char> v;
	my_copy(istream_iterator<char>{cin}, {}, back_inserter(v));
	// 포인터 처럼 사용하는 사기꾼 - iterator adaptor 반복자 어댑터


	for (int i = 0; i < 100; ++i)
		cout << v[i] << "-";
	cout << endl;
}

파일이름: 소스.cpp
파일크기: 797

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 2일)
//
// 오늘 알아볼 것
// C++ 20 span - contiguous 컨테이너를 일관된 방식으로 다루기 위해 만든 view
//		T[], array<T,N>, vector<T>, string, STRING 
//------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

void print(int[]);

void print(int a[]) {
	for (int i{}; i < 10; ++i)
		cout << a[i] << endl;
}

int main()
{	
	int a[10]{ 1,2,3,4,5 };
	//[문제] print는 a를 인자로 받아 전체 원소를 출력한다.
	// a를 선언, 정의하고 호출하라
	print(a);


	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 856

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(9주 2일)
//
// 오늘 알아볼 것
// C++ 20 span - contiguous 컨테이너를 일관된 방식으로 다루기 위해 만든 view
//		T[], array<T,N>, vector<T>, string, STRING 
//------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

void print(int*); // 배열을 함수의 인자로 사용하면 포인터로 바뀐다(type decay)

void print(int* a) {
	for (int i{}; i < 10; ++i)
		cout << a[i] << endl;
}

int main()
{	
	int a[10]{ 1,2,3,4,5 };
	//[문제] print는 a를 인자로 받아 전체 원소를 출력한다.
	// a를 선언, 정의하고 호출하라
	print(a);


	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 914

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 오늘 알아볼 것
// C++ 20 span - contiguous 컨테이너를 일관된 방식으로 다루기 위해 만든 view
//		T[], array<T,N>, vector<T>, string, STRING 
//------------------------------------------------------------------
#include <iostream>
#include <span>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

void print(span<int>); // 배열을 함수의 인자로 사용하면 포인터로 바뀐다(type decay)

void print(span<int> a) {
	cout << "a가 차지한 메모리 크기 - " << a.size_bytes() << endl;
	for (int i{}; i < a.size(); ++i)
		cout << a[i] << endl;
}

int main()
{	
	int a[10]{ 1,2,3,4,5 };
	//[문제] print는 a를 인자로 받아 전체 원소를 출력한다.
	// a를 선언, 정의하고 호출하라
	print(a);


	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 964

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 오늘 알아볼 것
// C++ 20 span - contiguous 컨테이너를 일관된 방식으로 다루기 위해 만든 view
//		T[], array<T,N>, vector<T>, string, STRING 
//------------------------------------------------------------------
#include <iostream>
#include <span>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

void print(span<int>);

void print(span<int> a) {
	cout << "span이 차지한 메모리 크기 - " << a.size_bytes() << endl;
	for (int i{}; i < a.size(); ++i)
		cout << a[i] << " ";
	cout << endl;
}

int main()
{	
	int a[10]{ 1,2,3,4,5 };
	
	// int [10] - span<int>로 변환되어 전달된다.
	print(a);

	vector v{ 1,3,5,7,9,11 };
	print(span<int>{v.begin() + 1, 3}); // v를 처다보며 v.begin() + 1 부터 3개까지

	

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1260

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 오늘 알아볼 것
// C++ 20 span - contiguous 컨테이너를 일관된 방식으로 다루기 위해 만든 view
//		T[], array<T,N>, vector<T>, string, STRING 
//------------------------------------------------------------------
#include <iostream>
#include <span>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

void print(span<int>);
void print(span<char> a);

void print(span<int> a) {
	cout << "span이 차지한 메모리 크기 - " << a.size_bytes() << endl;
	for (int i{}; i < a.size(); ++i)
		cout << a[i] << " ";
	cout << endl;
}
void print(span<char> a) {
	cout << "span<char>이 차지한 메모리 크기 - " << a.size_bytes() << endl;
	for (int i{}; i < a.size(); ++i)
		cout << a[i] << " ";
	cout << endl;
}

int main()
{	
	int a[10]{ 1,2,3,4,5 };
	
	// int [10] - span<int>로 변환되어 전달된다.
	print(a);

	vector v{ 1,3,5,7,9,11 };
	print(span<int>{v.begin() + 1, 3}); // v를 처다보며 v.begin() + 1 부터 3개까지

	STRING s{ "Standard Template Library" };
	print(span<char>{&(* s.begin()), s.getNum()});

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 815

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 오늘 알아볼 것
// set - key를 compare로 정렬하고 있다. 찾기/제거/추가 동작이 O(logN)
//  - set의 주요 동작을 알아본다.
//  - set에 내가 만든 Dog를 넣어본다.
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <vector>
#include <random>
#include <numeric>
#include <format>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{	
	vector<int> v( 100 ); // 100칸을 만들어줌

	for (int n : v)
		cout << format("{:4}", n);
	cout << endl;
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 984

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 오늘 알아볼 것
// set - key를 compare로 정렬하고 있다. 찾기/제거/추가 동작이 O(logN)
//  - set의 주요 동작을 알아본다.
//  - set에 내가 만든 Dog를 넣어본다.
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <vector>
#include <random>
#include <numeric>
#include <format>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

random_device rd;
default_random_engine dre{rd()};


int main()
{	
	vector<int> v( 100 ); // 100칸을 만들어줌
	iota(v.begin(), v.end(), 1); // 1부터 하나씩 증가시켜 저장해줌
	shuffle(v.begin(), v.end(), dre); // 섞는 함수
	for (int n : v)
		cout << format("{:4}", n);
	cout << endl;
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1069

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 오늘 알아볼 것
// set - key를 compare로 정렬하고 있다. 찾기/제거/추가 동작이 O(logN)
//  - set의 주요 동작을 알아본다.
//  - set에 내가 만든 Dog를 넣어본다.
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <vector>
#include <random>
#include <numeric>
#include <format>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

random_device rd;
default_random_engine dre{rd()};


int main()
{	
	vector<int> v( 100 ); // 100칸을 만들어줌
	iota(v.begin(), v.end(), 1); // 1부터 하나씩 증가시켜 저장해줌
	shuffle(v.begin(), v.end(), dre); // 섞는 함수

	//[문제] v의 원소를 set에 넣고 출력한다.

	set<int> s{v.begin(), v.end()};


	for (int n : s)
		cout << format("{:4}", n);
	cout << endl;
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1103

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 오늘 알아볼 것
// set - key를 compare로 정렬하고 있다. 찾기/제거/추가 동작이 O(logN)
//  - set의 주요 동작을 알아본다.
//  - set에 내가 만든 Dog를 넣어본다.
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <vector>
#include <random>
#include <numeric>
#include <format>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

random_device rd;
default_random_engine dre{rd()};


int main()
{	
	vector<int> v( 100 ); // 100칸을 만들어줌
	iota(v.begin(), v.end(), 1); // 1부터 하나씩 증가시켜 저장해줌
	shuffle(v.begin(), v.end(), dre); // 섞는 함수

	//[문제] v의 원소를 내림차순에 정렬하는 set에 넣고 출력한다.

	set<int, greater<int>> s{v.begin(), v.end()};


	for (int n : s)
		cout << format("{:4}", n);
	cout << endl;
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 939

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 오늘 알아볼 것
// set - key를 compare로 정렬하고 있다. 찾기/제거/추가 동작이 O(logN)
//  - set의 주요 동작을 알아본다.
//  - set에 내가 만든 Dog를 넣어본다.
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <format>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;



int main()
{	
	ifstream in{ "소스.cpp" };
	//[문제] "소스.cpp"의 단어를 set에 저장하고 화면에 출력한다.

	set<string> s{ istream_iterator<string>{in} , {} };

	// 한 단어 한 줄씩 화면 중앙에 출력하라.
	
	for (const string& str : s) 
		cout << format("{:^80}\n", str);
	

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 965

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 오늘 알아볼 것
// set - key를 compare로 정렬하고 있다. 찾기/제거/추가 동작이 O(logN)
//  - set의 주요 동작을 알아본다.
//  - set에 내가 만든 Dog를 넣어본다.
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <format>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;



int main()
{	
	ifstream in{ "소스.cpp" };
	//[문제] "소스.cpp"의 단어를 set에 저장하고 화면에 출력한다.

	set<string> s{ istream_iterator<string>{in} , {} };

	// 역순으로 한 단어 한 줄씩 화면 중앙에 출력하라.
	
	for (auto i{s.crbegin()}; i != s.crend(); ++i)
		cout << format("{:^80}\n", *i);
	

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 986

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 오늘 알아볼 것
// set - key를 compare로 정렬하고 있다. 찾기/제거/추가 동작이 O(logN)
//  - set의 주요 동작을 알아본다.
//  - set에 내가 만든 Dog를 넣어본다.
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <format>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;



int main()
{	
	ifstream in{ "소스.cpp" };
	//[문제] "소스.cpp"의 단어를 set에 저장하고 화면에 출력한다.

	multiset<string> s{ istream_iterator<string>{in} , {} }; // 중복 키를 받음

	// 역순으로 한 단어 한 줄씩 화면 중앙에 출력하라.
	
	for (auto i{s.cbegin()}; i != s.cend(); ++i)
		cout << format("{:^80}\n", *i);
	

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1149

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 오늘 알아볼 것
// set - key를 compare로 정렬하고 있다. 찾기/제거/추가 동작이 O(logN)
//  - set의 주요 동작을 알아본다.
//  - set에 내가 만든 Dog를 넣어본다.
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <format>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;



int main()
{	
	save("소스.cpp");

	ifstream in{ "소스.cpp" };
	
	multiset<string> s{ istream_iterator<string>{in} , {} }; // 중복 키를 받음
	
	//[문제] 찾을 단어를 입력받아 있는지 없는지 알려준다.
	while (true) {
		cout << "찾을 단어 : ";
		string word;
		cin >> word;

		// [문제] 있는지 없는지 알려준다.
		if (s.find(word) == s.end())
			cout << "없음" << endl;
		else
			cout << "있음" << endl;
	}
	


	for (auto i{s.cbegin()}; i != s.cend(); ++i)
		cout << format("{:^80}\n", *i);


}

파일이름: 소스.cpp
파일크기: 1138

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 오늘 알아볼 것
// set - key를 compare로 정렬하고 있다. 찾기/제거/추가 동작이 O(logN)
//  - set의 주요 동작을 알아본다.
//  - set에 내가 만든 Dog를 넣어본다.
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <format>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;



int main()
{	
	save("소스.cpp");

	ifstream in{ "소스.cpp" };
	
	multiset<string> s{ istream_iterator<string>{in} , {} }; // 중복 키를 받음
	
	//[문제] 찾을 단어를 입력받아 있는지 없는지 알려준다. -> contains 멤버함수 활용
	while (true) {
		cout << "찾을 단어 : ";
		string word;
		cin >> word;

		// [문제] 있는지 없는지 알려준다.
		cout << boolalpha << s.contains(word) << endl;
	}

	for (auto i{s.cbegin()}; i != s.cend(); ++i)
		cout << format("{:^80}\n", *i);
	cout << endl;

}

파일이름: 소스.cpp
파일크기: 1228

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 오늘 알아볼 것
// set - key를 compare로 정렬하고 있다. 찾기/제거/추가 동작이 O(logN)
//  - set의 주요 동작을 알아본다.
//  - set에 내가 만든 Dog를 넣어본다.
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <format>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;



int main()
{	
	save("소스.cpp");

	ifstream in{ "소스.cpp" };
	
	multiset<string> s{ istream_iterator<string>{in} , {} }; // 중복 키를 받음
	
	//[문제] 찾을 단어를 입력받아 있으면 몇 개인지 출력
	while (true) {
		cout << "찾을 단어 : ";
		string word;
		cin >> word;

		// [문제] 구간을 찾는다
		auto [하한, 상한] = s.equal_range(word);
		if (하한 == 상한)
			cout << "없음" << endl;
		else
			cout << word << " - " << distance(하한, 상한) << "개 있습니다." << endl;
	}

	for (auto i{s.cbegin()}; i != s.cend(); ++i)
		cout << format("{:^80}\n", *i);
	cout << endl;

}

파일이름: 소스.cpp
파일크기: 1087

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 오늘 알아볼 것
// set - key를 compare로 정렬하고 있다. 찾기/제거/추가 동작이 O(logN)
//  - set의 주요 동작을 알아본다.
//  - set에 내가 만든 Dog를 넣어본다.
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <string>
#include <random>
#include <list>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<int> uid{ 'a','z' };
uniform_int_distribution<int> uidnum{ 1,10000 };


class Dog {
	string name;
	int num;
public:
	Dog() {
		for (int i{}; i < 10; ++i) 
			name += uid(dre);
		num = uidnum(dre);
	}

	void show() const {
		cout << name << " - " << num << endl;
	}
};

int main()
{	
	list<Dog> s(1000);

	for (const Dog& d : s)
		d.show();

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1224

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 오늘 알아볼 것
// set - key를 compare로 정렬하고 있다. 찾기/제거/추가 동작이 O(logN)
//  - set의 주요 동작을 알아본다.
//  - set에 내가 만든 Dog를 넣어본다.
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <string>
#include <random>
#include <list>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<int> uid{ 'a','z' };
uniform_int_distribution<int> uidnum{ 1,10000 };


class Dog {
	string name;
	int num;
public:
	Dog() {
		for (int i{}; i < 10; ++i) 
			name += uid(dre);
		num = uidnum(dre);
	}

	auto operator<=>(const Dog& a) const = default;
	
	void show() const {
		cout << name << " - " << num << endl;
	}


};

int main()
{	
	set<Dog> s;

	// s에 Dog 1000개를 집어넣어라.
	for (int i{}; i < 1000; ++i)
		s.insert(Dog());

	for (const Dog& d : s)
		d.show();

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1283

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 2일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 5월 25일 (수) - 졸업연구설명회(? 2시30분)
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <string>
#include <random>
#include <list>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<int> uid{ 'a','z' };
uniform_int_distribution<int> uidnum{ 1,10000 };


class Dog {
	string name;
	int num;
public:
	Dog() {
		for (int i{}; i < 10; ++i) 
			name += uid(dre);
		num = uidnum(dre);
	}

	auto operator<=>(const Dog& a) const = default;
	
	void show() const {
		cout << name << " - " << num << endl;
	}

	string getName() const {
		return name;
	}

	int getNum() const {
		return num;
	}
};

int main()
{	
	set<Dog> s;

	for (int i{}; i < 1'000; ++i)
		s.emplace();

	//1. less<Dog>가 있는가
	//2. operator<(Dog, Dog) 가 있는가
	// 2.1 - 멤버함수로
	// 2.2 - 전역함수로도 가능
	//

	for (const Dog& dog : s)
		dog.show();

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1356

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 2일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 5월 25일 (수) - 졸업연구설명회(? 2시30분)
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <string>
#include <random>
#include <list>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<int> uid{ 'a','z' };
uniform_int_distribution<int> uidnum{ 1,10000 };


class Dog {
	string name;
	int num;
public:
	Dog() {
		for (int i{}; i < 10; ++i) 
			name += uid(dre);
		num = uidnum(dre);
	}

	auto operator<=>(const Dog& a) const = default;

	bool operator<(const Dog& a) const {
		return num < a.getNum();
	}
	
	void show() const {
		cout << name << " - " << num << endl;
	}

	string getName() const {
		return name;
	}

	int getNum() const {
		return num;
	}
};

int main()
{	
	set<Dog> s;

	for (int i{}; i < 1'000; ++i)
		s.emplace();

	//1. less<Dog>가 있는가
	//2. operator<(Dog, Dog) 가 있는가
	// 2.1 - 멤버함수로
	// 2.2 - 전역함수로도 가능
	//

	for (const Dog& dog : s)
		dog.show();

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1514

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 2일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 5월 25일 (수) - 졸업연구설명회(? 2시30분)
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <string>
#include <random>
#include <list>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<int> uid{ 'a','z' };
uniform_int_distribution<int> uidnum{ 1,10000 };


class Dog {
	string name;
	int num;
public:
	Dog() {
		for (int i{}; i < 10; ++i) 
			name += uid(dre);
		num = uidnum(dre);
	}

	auto operator<=>(const Dog& a) const = default;

	bool operator<(const Dog& a) const {
		return num < a.getNum();
	}
	
	void show() const {
		cout << name << " - " << num << endl;
	}

	string getName() const {
		return name;
	}

	int getNum() const {
		return num;
	}
};

auto 정렬기준 = [](const Dog& a, const Dog& b)
{
	return a.getName() < b.getName();
};

int main()
{	
	//array <int,10> - 10 : 타입이 아닌 예외

	set<Dog, decltype(정렬기준)> s;

	for (int i{}; i < 1'000; ++i)
		s.emplace();

	//1. less<Dog>가 있는가
	//2. operator<(Dog, Dog) 가 있는가
	// 2.1 - 멤버함수로
	// 2.2 - 전역함수로도 가능
	//

	for (const Dog& dog : s)
		dog.show();

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1667

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 2일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 5월 25일 (수) - 졸업연구설명회(? 2시30분)
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <string>
#include <random>
#include <list>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<int> uid{ 'a','z' };
uniform_int_distribution<int> uidnum{ 1,10000 };


class Dog {
	string name;
	int num;
public:
	Dog() {
		for (int i{}; i < 10; ++i) 
			name += uid(dre);
		num = uidnum(dre);
	}

	auto operator<=>(const Dog& a) const = default;

	bool operator<(const Dog& a) const {
		return num < a.getNum();
	}
	
	void show() const {
		cout << name << " - " << num << endl;
	}

	string getName() const {
		return name;
	}

	int getNum() const {
		return num;
	}
};

auto 정렬기준 = [](const Dog& a, const Dog& b)
{
	return a.getName() < b.getName();
};
/*
* []를 컴파일러가

class 정렬기준 {
	
	?type? operator()(인자1, 2) const {
		return ~~
	}
	멤버함수 반환값을 유추하여 만듦
}

로 만듦
*/

int main()
{	
	//array <int,10> - 10 : 타입이 아닌 예외

	set<Dog, decltype(정렬기준)> s;

	for (int i{}; i < 1'000; ++i)
		s.emplace();

	//1. less<Dog>가 있는가
	//2. operator<(Dog, Dog) 가 있는가
	// 2.1 - 멤버함수로
	// 2.2 - 전역함수로도 가능
	//

	for (const Dog& dog : s)
		dog.show();

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1004

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 2일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
// 5월 25일 (수) - 졸업연구설명회(? 2시30분)
// 
// set에 우주선연산자로 만들어주면 왜 string으로 자동정렬하는가
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <string>
#include <random>
#include <list>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

// [문제] 키보드 단어를 set<string>에 저장하라.
// set<string>은 단어의 길이기준 오름차순으로 정렬한다.
// 저장된 단어를 출력하라.

auto 정렬기준 = [](const string& a, const string& b)
{
	return a.size() < b.size();
};

int main()
{	
	set<string, decltype(정렬기준)> s{ istream_iterator<string>{cin}, {}};


	for (const string& str : s)
		cout << str << endl;


	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1030

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 2일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
// 5월 25일 (수) - 졸업연구설명회(? 2시30분)
// 
// set에 우주선연산자로 만들어주면 왜 string으로 자동정렬하는가
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <string>
#include <random>
#include <list>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

// [문제] 키보드 단어를 set<string>에 저장하라.
// set<string>은 단어의 길이기준 오름차순으로 정렬한다.
// 저장된 단어를 출력하라.

class 길이순 {
public:
	bool operator()(const string& a, const string& b) const {
		return a.size() < b.size();
	}
};

int main()
{	
	multiset<string, 길이순> s{ istream_iterator<string>{cin}, {}};


	for (const string& str : s)
		cout << str << endl;


	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1067

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 2일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
// 5월 25일 (수) - 졸업연구설명회(? 2시30분)
// 
// set에 우주선연산자로 만들어주면 왜 string으로 자동정렬하는가
//------------------------------------------------------------------
#include <iostream>
#include <set>
#include <string>
#include <random>
#include <list>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

// [문제] 키보드 단어를 set<string>에 저장하라.
// set<string>은 단어의 길이기준 오름차순으로 정렬한다.
// 저장된 단어를 출력하라.

class 길이순 {
public:
	bool operator()(const string& a, const string& b) const {
		return a.size() < b.size();
	}
};

int main()
{	
	multiset<string, 길이순> s{ istream_iterator<string>{cin}, {}};
	// set 키 값(길이)이 같으면 제외시킴

	for (const string& str : s)
		cout << str << endl;


	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 865

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 2일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
// 5월 25일 (수) - 졸업연구설명회(? 2시30분)
// 
// set<Dog>에 우주선연산자로 만들어주면 왜 string기준으로 자동정렬하는가
//------------------------------------------------------------------
#include <iostream>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

// [문제] 게임회사와 게임들을 map으로 관리한다.



int main()
{	
	map<string, vector<string>> gameC{ {"넥슨", {"바람의 나라","메이플스토리" }} };

	pair<string, vector<string>> p;
	gameC.insert(p);

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 887

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 2일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
// 5월 25일 (수) - 졸업연구설명회(? 2시30분)
// 
// set<Dog>에 우주선연산자로 만들어주면 왜 string기준으로 자동정렬하는가
//------------------------------------------------------------------
#include <iostream>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

// [문제] 게임회사와 게임들을 map으로 관리한다.



int main()
{	
	map<string, vector<string>> gameC{ {"넥슨", {"바람의 나라","메이플스토리" }} };

	pair<string, vector<string>> p{ "엔씨", {"리니지"} };
	gameC.insert(p);

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 958

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 2일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
// 5월 25일 (수) - 졸업연구설명회(? 2시30분)
// 
// set<Dog>에 우주선연산자로 만들어주면 왜 string기준으로 자동정렬하는가
//------------------------------------------------------------------
#include <iostream>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

// [문제] 게임회사와 게임들을 map으로 관리한다.



int main()
{	
	map<string, vector<string>> gameC{ {"넥슨", {"바람의 나라","메이플스토리" }} };

	pair<string, vector<string>> p{ "엔씨", {"리니지"} };
	gameC.insert(p);

	gameC.insert(make_pair("펄어비스", vector<string>{ "검은사막" }));

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1150

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 2일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
// 5월 25일 (수) - 졸업연구설명회(? 2시30분)
// 
// set<Dog>에 우주선연산자로 만들어주면 왜 string기준으로 자동정렬하는가
//------------------------------------------------------------------
#include <iostream>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

// [문제] 게임회사와 게임들을 map으로 관리한다.



int main()
{	
	map<string, vector<string>> gameC{ {"넥슨", {"바람의 나라","메이플스토리" }} };

	pair<string, vector<string>> p{ "엔씨", {"리니지"} };
	gameC.insert(p);

	gameC.insert(make_pair("펄어비스", vector<string>{ "검은사막" }));

	// 리스트 전체 출력
	
	for (pair<string, vector<string>> p : gameC) {
		cout << p.first << " - ";
		for (const string& title : p.second)
			cout << title << " ";
		cout << endl;
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1123

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 2일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
// 5월 25일 (수) - 졸업연구설명회(? 2시30분)
// 
// set<Dog>에 우주선연산자로 만들어주면 왜 string기준으로 자동정렬하는가
//------------------------------------------------------------------
#include <iostream>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

// [문제] 게임회사와 게임들을 map으로 관리한다.



int main()
{	
	map<string, vector<string>> gameC{ {"넥슨", {"바람의 나라","메이플스토리" }} };

	pair<string, vector<string>> p{ "엔씨", {"리니지"} };
	gameC.insert(p);

	gameC.insert(make_pair("펄어비스", vector<string>{ "검은사막" }));

	// 리스트 전체 출력
	
	for (auto [회사, 게임들] : gameC) {
		cout << 회사 << " - ";
		for (auto 게임 : 게임들)
			cout << 게임 << " ";
		cout << endl;
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1137

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(10주 2일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
// 5월 25일 (수) - 졸업연구설명회(? 2시30분)
// 
// set<Dog>에 우주선연산자로 만들어주면 왜 string기준으로 자동정렬하는가
//------------------------------------------------------------------
#include <iostream>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

// [문제] 게임회사와 게임들을 map으로 관리한다.



int main()
{	
	map<string, vector<string>> gameC{ {"넥슨", {"바람의 나라","메이플스토리" }} };

	pair<string, vector<string>> p{ "엔씨", {"리니지"} };
	gameC.insert(p);

	gameC.insert(make_pair("펄어비스", vector<string>{ "검은사막" }));

	// 리스트 전체 출력
	
	for (const auto& [회사, 게임들] : gameC) {
		cout << 회사 << " - ";
		for (const auto& 게임 : 게임들)
			cout << 게임 << " ";
		cout << endl;
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 837

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
//------------------------------------------------------------------
#include <iostream>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;


int main()
{	
	// 연관배열처럼 사용할 수 있는 map
	// map<과일, 당도>
	map<string, double> sd;
	
	sd.insert(pair<string, double>{"애플", 7});
	sd.insert(make_pair("샤인머스켓", 12.5));
	sd["바나나"] = 9.3;

	for (const auto& [과일, 당도] : sd) {
		cout << 과일 << " - " << 당도 << endl;
	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 826

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;


// eclass에서 Frankenstein.txt를 다운받아
// vector<string>에 저장하라.
// 모두 몇 단어인지 출력하라.

int main()
{
	ifstream in{ "Frankenstein.txt" };

	vector<string> v;
	string str;
	while (in >> str) {
		v.push_back(str);
	}

	cout << v.size() << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 801

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;


// eclass에서 Frankenstein.txt를 다운받아
// vector<string>에 저장하라.
// 모두 몇 단어인지 출력하라.

int main()
{
	ifstream in{ "Frankenstein.txt" };

	vector<string> v{ istream_iterator<string>{in}, {} };

	cout << v.size() << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1059

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;


// eclass에서 Frankenstein.txt를 다운받아
// vector<string>에 저장하라.
// 모두 몇 단어인지 출력하라.

int main()
{
	ifstream in{ "Frankenstein.txt" };

	vector<string> v{ istream_iterator<string>{in}, {} };

	cout << v.size() << endl;

	// [문제] 알파벳과 개수를 화면에 출력하라.
	map<char, int> alphaNum;

	for (const string& s : v) 
		for (const char c : s)
			alphaNum[c]++;
	
	for (const auto& [alpha, num] : alphaNum)
		cout << "[ "<< alpha << "] " << "개수 - " << num << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1465

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;


// eclass에서 Frankenstein.txt를 다운받아
// vector<string>에 저장하라.
// 모두 몇 단어인지 출력하라.

int main()
{
	ifstream in{ "Frankenstein.txt" };

	vector<string> v{ istream_iterator<string>{in}, {} };

	cout << v.size() << endl;

	// [문제] 알파벳과 개수를 화면에 출력하라.
	map<char, int> alphaNum;

	for (const string& s : v) 
		for (const char c : s)
			if(isalpha(c)) alphaNum[c]++;
	
	for (const auto& [alpha, num] : alphaNum)
		cout << "[ "<< alpha << " ] " << "개수 - " << num << endl;

	// [문제] 개수 내림차순으로 출력하시오. 벡터를 새로 만들어 저장
	vector<pair<char, int>> civ{alphaNum.begin(), alphaNum.end()};
	sort(civ.begin(), civ.end(), [](const auto& a, const auto& b) {
		return a.second > b.second;
		});

	cout << endl << endl;
	for (const auto& [alpha, num] : civ)
		cout << "[ " << alpha << " ] " << "개수 - " << num << endl;

	
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1408

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;


// eclass에서 Frankenstein.txt를 다운받아
// vector<string>에 저장하라.
// 모두 몇 단어인지 출력하라.

int main()
{
	ifstream in{ "Frankenstein.txt" };

	vector<string> v{ istream_iterator<string>{in}, {} };

	cout << v.size() << endl;

	// [문제] 알파벳과 개수를 화면에 출력하라.
	map<char, int> alphaNum;

	for (const string& s : v) 
		for (const char c : s)
			if(isalpha(c)) alphaNum[c]++;
	
	for (const auto& [alpha, num] : alphaNum)
		cout << "[ "<< alpha << " ] " << "개수 - " << num << endl;

	// [문제] 개수 내림차순으로 출력하시오. 맵을 뒤집음
	map<int, char, greater<int>> numAlpha;
	for (const auto& [alpha, num] : alphaNum)
		numAlpha.insert({ num, alpha });
	
	cout << endl << endl;
	for (const auto& [num, alpha] : numAlpha)
		cout << "[ " << alpha << " ] " << "개수 - " << num << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1044

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;


// eclass에서 Frankenstein.txt를 다운받아
// vector<string>에 저장하라.
// 모두 몇 단어인지 출력하라.

int main()
{
	ifstream in{ "Frankenstein.txt" };

	vector<string> v{ istream_iterator<string>{in}, {} };

	cout << v.size() << endl;

	// [문제] 길이가 11인 단어를 "길이11.txt"에 기록하시오
	ofstream out{ "길이11.txt" };

	copy_if(v.begin(), v.end(), ostream_iterator<string>{out , " "}, [](const string& s) {
		return s.size() == 15;
		});




	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1229

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;


// eclass에서 Frankenstein.txt를 다운받아
// vector<string>에 저장하라.
// 모두 몇 단어인지 출력하라.

int main()
{
	ifstream in{ "Frankenstein.txt" };

	vector<string> v{ istream_iterator<string>{in}, {} };

	cout << v.size() << endl;

	// [문제] 이 소설에서 사용된 단어와 개수를 출력하라.
	// 개수가 많은 것 부터 20개만 출력하라
	map<string, int> wordNum;

	for (const string& word : v)
		wordNum[word]++;

	map<int, string, greater<int>> numWord;

	for (const auto& [word, num] : wordNum)
		numWord[num] = word;

	auto p = numWord.begin();
	for (int i{}; i < 20; ++i, ++p)
		cout << p->first << " - " << p->second << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1255

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;


// eclass에서 Frankenstein.txt를 다운받아
// vector<string>에 저장하라.
// 모두 몇 단어인지 출력하라.

int main()
{
	ifstream in{ "Frankenstein.txt" };

	vector<string> v{ istream_iterator<string>{in}, {} };

	cout << v.size() << endl;

	// [문제] 이 소설에서 사용된 단어와 개수를 출력하라.
	// 개수가 많은 것 부터 20개만 출력하라
	map<string, int> wordNum;

	for (const string& word : v)
		wordNum[word]++;

	map<int, string, greater<int>> numWord;

	for (const auto& [word, num] : wordNum)
		numWord[num] = word;

	auto p = numWord.rbegin();
	for (int i{}; i < 20; ++i, ++p)
		cout << p->first << " - " << p->second << endl;

	// 단어 개수가 다름 

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 1333

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 1일)
//
// 1.Sequence container
// 2.Associative container - set/multiset
// 
// 
//		map<key, value, key_compare>
// 
//------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include <map>
#include <string>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;


// eclass에서 Frankenstein.txt를 다운받아
// vector<string>에 저장하라.
// 모두 몇 단어인지 출력하라.

int main()
{
	ifstream in{ "Frankenstein.txt" };

	vector<string> v{ istream_iterator<string>{in}, {} };

	cout << v.size() << endl;

	// [문제] 이 소설에서 사용된 단어와 개수를 출력하라.
	// 개수가 많은 것 부터 20개만 출력하라
	map<string, int> wordNum;

	for (const string& word : v)
		wordNum[word]++;

	multimap<int, string, greater<int>> numWord;

	for (const auto& [word, num] : wordNum)
		numWord.insert({ num, word });

	auto p = numWord.rbegin();
	for (int i{}; i < 20; ++i, ++p)
		cout << p->first << " - " << p->second << endl;

	// 단어 개수가 다름 -> multimap으로 사용해야하는데 multimap에선 []을 사용할 수 없음

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 460

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 1일)
//
// 3. unordered_set/unordered_map
// 이거 보다 빨리 찾기 어렵다. (hash , O(1))
// 
//------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 746

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 2일)
//
// 3. unordered_set/unordered_map
// - 순서없는 셋 파해쳐본다. - 화면에 메모리를 그림으로 출력
// - 내가 만든 STRING을 unordered_set<STRING> 하려면?
// 이거 보다 빨리 찾기 어렵다. (hash , O(1))
// 
// 컨테이너들의 찾기 실력을 검증해 본다.
// 
//------------------------------------------------------------------
#include <iostream>
#include <unordered_set>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	unordered_set<int> us{ 1,2,3,4 };

	for (int n : us)
		cout << n << " ";
	cout << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 823

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 2일)
//
// 3. unordered_set/unordered_map
// - 순서없는 셋 파해쳐본다. - 화면에 메모리를 그림으로 출력
// - 내가 만든 STRING을 unordered_set<STRING> 하려면?
// 이거 보다 빨리 찾기 어렵다. (hash , O(1))
// 
// 컨테이너들의 찾기 실력을 검증해 본다.
// 
//------------------------------------------------------------------
#include <iostream>
#include <unordered_set>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	unordered_set<int> us{ 1,2,3,4 };

	for (int n : us)
		cout << n << " ";
	cout << endl;

	us.insert(-1);

	for (int n : us)
		cout << n << " ";
	cout << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 923

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 2일)
//
// 3. unordered_set/unordered_map
// - 순서없는 셋 파해쳐본다. - 화면에 메모리를 그림으로 출력
// - 내가 만든 STRING을 unordered_set<STRING> 하려면?
// 이거 보다 빨리 찾기 어렵다. (hash , O(1))
// 
// 컨테이너들의 찾기 실력을 검증해 본다.
// 
//------------------------------------------------------------------
#include <iostream>
#include <unordered_set>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	unordered_set<int> us{ 1,2,3,4 };

	for (int n : us)
		cout << n << " ";
	cout << endl;

	us.insert(-1);
	us.insert(100);
	us.insert(1000); 
	us.insert(10000);
	us.insert(333);
	// 순서가 없이 들어감

	for (int n : us)
		cout << n << " ";
	cout << endl;

	save("소스.cpp");
}


파일이름: 소스.cpp
파일크기: 1049

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 2일)
//
// 3. unordered_set/unordered_map
// - 순서없는 셋 파해쳐본다. - 화면에 메모리를 그림으로 출력
// - 내가 만든 STRING을 unordered_set<STRING> 하려면?
// 이거 보다 빨리 찾기 어렵다. (hash , O(1))
// 
// 컨테이너들의 찾기 실력을 검증해 본다.
// 
//------------------------------------------------------------------
#include <iostream>
#include <unordered_set>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	save("소스.cpp");

	unordered_set<int> us{ 1,2,3,4 };

	while (true) {
		// 현재 메모리를 화면에 출력

		for (int i{}; i < us.bucket_count(); ++i) {
			cout << "[" << i << "]";
			for (auto p = us.begin(i); p != us.end(i); ++p)
				cout << " ->" << *p;
			cout << endl;
		}

		// 새로운 원소 추가
		cout << "추가할 int는? ";
		int num;
		cin >> num;
		cout << endl << endl;

		us.insert(num);
	}
}

파일이름: 소스.cpp
파일크기: 1284

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 2일)
//
// 3. unordered_set/unordered_map
// - 순서없는 셋 파해쳐본다. - 화면에 메모리를 그림으로 출력
// - 내가 만든 STRING을 unordered_set<STRING> 하려면?
// 이거 보다 빨리 찾기 어렵다. (hash , O(1))
// 
// 컨테이너들의 찾기 실력을 검증해 본다.
// 
//------------------------------------------------------------------
#include <iostream>
#include <unordered_set>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

//template <class T>  - 일반화
template<>
class hash<STRING> { // 특수화
public:
	size_t operator()(const STRING& str) const {
		return hash<string>()({ str.begin(), str.end() });
	}
	
};


int main()
{
	save("소스.cpp");

	unordered_set<STRING> us{ "Standard", "Template", "Library"};

	while (true) {
		// 현재 메모리를 화면에 출력

		for (int i{}; i < us.bucket_count(); ++i) {
			cout << "[" << i << "]";
			for (auto p = us.begin(i); p != us.end(i); ++p)
				cout << " ->" << *p;
			cout << endl;
		}

		// 새로운 원소 추가
		cout << "추가할 STRING는? ";
		STRING str;
		cin >> str;
		cout << endl << endl;

		us.insert(str);
	}
}

파일이름: 소스.cpp
파일크기: 1349

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 2일)
//
// 3. unordered_set/unordered_map
// - 순서없는 셋 파해쳐본다. - 화면에 메모리를 그림으로 출력
// - 내가 만든 STRING을 unordered_set<STRING> 하려면?
// 이거 보다 빨리 찾기 어렵다. (hash , O(1))
// 
// 컨테이너들의 찾기 실력을 검증해 본다.
// 
//------------------------------------------------------------------
#include <iostream>
#include <unordered_set>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

//template <class T>  - 일반화
template<>
class hash<STRING> { // 특수화
public:
	size_t operator()(const STRING& str) const {
		auto val = hash<string>()({ str.begin(), str.end() });
		cout << "해시의 출력값 - " << val << endl;
		return val;
	}
	
};


int main()
{
	save("소스.cpp");

	unordered_set<STRING> us{ "Standard", "Template", "Library"};

	while (true) {
		// 현재 메모리를 화면에 출력

		for (int i{}; i < us.bucket_count(); ++i) {
			cout << "[" << i << "]";
			for (auto p = us.begin(i); p != us.end(i); ++p)
				cout << " ->" << *p;
			cout << endl;
		}

		// 새로운 원소 추가
		cout << "추가할 STRING는? ";
		STRING str;
		cin >> str;
		cout << endl << endl;

		us.insert(str);
	}
}

파일이름: 소스.cpp
파일크기: 1374

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 2일)
//
// 3. unordered_set/unordered_map
// - 순서없는 셋 파해쳐본다. - 화면에 메모리를 그림으로 출력
// - 내가 만든 STRING을 unordered_set<STRING> 하려면?
// 이거 보다 빨리 찾기 어렵다. (hash , O(1))
// 
// 컨테이너들의 찾기 실력을 검증해 본다.
// 
//------------------------------------------------------------------
#include <iostream>
#include <unordered_set>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

//template <class T>  - 일반화
template<>
class hash<STRING> { // 특수화
public:
	size_t operator()(const STRING& str) const {
		auto val = hash<string>()({ str.begin(), str.end() });
		cout << "해시의 출력값 - " << val << " 위치 - " << val % 8 << endl;
		return val;
	}
	
};


int main()
{
	save("소스.cpp");

	unordered_set<STRING> us{ "Standard", "Template", "Library"};

	while (true) {
		// 현재 메모리를 화면에 출력

		for (int i{}; i < us.bucket_count(); ++i) {
			cout << "[" << i << "]";
			for (auto p = us.begin(i); p != us.end(i); ++p)
				cout << " ->" << *p;
			cout << endl;
		}

		// 새로운 원소 추가
		cout << "추가할 STRING는? ";
		STRING str;
		cin >> str;
		cout << endl << endl;

		us.insert(str);
	}
}

파일이름: 소스.cpp
파일크기: 2354

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 2일)
//
// 3. unordered_set/unordered_map
// - 순서없는 셋 파해쳐본다. - 화면에 메모리를 그림으로 출력
// - 내가 만든 STRING을 unordered_set<STRING> 하려면?
// 이거 보다 빨리 찾기 어렵다. (hash , O(1))
// 
// 컨테이너들의 찾기 실력을 검증해 본다.
// vector - set - unordered_set
// O(N)		O(logN)		O(1)
// 10'000'000 개 int중에서 1000개의 int를 찾아본다.
// 
//------------------------------------------------------------------
#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>

#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

array<int, 1000'0000> numbers;
array<int, 1000> toFind;

default_random_engine dre;
uniform_int_distribution<int> uid{ 1, 100'000'000 };

int main()
{
	for (int& n : numbers)
		n = uid(dre);
	for (int& n : toFind)
		n = uid(dre);

	{	//벡터의 찾기실력
		vector<int>v{ numbers.begin(), numbers.end() };

		int cnt{};

		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end())
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();


		cout << "벡터의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;
		cout << "벡터에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;

	}

	{	//셋의 찾기실력
		set<int>v{ numbers.begin(), numbers.end() };

		int cnt{};

		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			if (v.contains(n))
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();


		cout << "셋의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;
		cout << "셋에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;

	}



	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 3008

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 2일)
//
// 3. unordered_set/unordered_map
// - 순서없는 셋 파해쳐본다. - 화면에 메모리를 그림으로 출력
// - 내가 만든 STRING을 unordered_set<STRING> 하려면?
// 이거 보다 빨리 찾기 어렵다. (hash , O(1))
// 
// 컨테이너들의 찾기 실력을 검증해 본다.
// vector - set - unordered_set
// O(N)		O(logN)		O(1)
// 10'000'000 개 int중에서 1000개의 int를 찾아본다.
// 
//------------------------------------------------------------------
#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>

#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

array<int, 1000'0000> numbers;
array<int, 1000> toFind;

default_random_engine dre;
uniform_int_distribution<int> uid{ 1, 100'000'000 };

int main()
{
	for (int& n : numbers)
		n = uid(dre);
	for (int& n : toFind)
		n = uid(dre);

	{	//벡터의 찾기실력
		vector<int>v{ numbers.begin(), numbers.end() };

		int cnt{};

		cout << "벡터의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;

		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end())
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();


		
		cout << "벡터에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;

	}

	{	//셋의 찾기실력
		multiset<int>v{ numbers.begin(), numbers.end() };

		int cnt{};

		cout << "셋의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;

		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			if (v.contains(n))
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();


		
		cout << "셋에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;

	}

	{	//언오더드셋의 찾기실력
		unordered_multiset<int>v{ numbers.begin(), numbers.end() };

		int cnt{};

		cout << "언오더드셋의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;

		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			if (v.contains(n))
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();



		cout << "언오더스셋에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;

	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 3183

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 2일)
//
// 3. unordered_set/unordered_map
// - 순서없는 셋 파해쳐본다. - 화면에 메모리를 그림으로 출력
// - 내가 만든 STRING을 unordered_set<STRING> 하려면?
// 이거 보다 빨리 찾기 어렵다. (hash , O(1))
// 
// 컨테이너들의 찾기 실력을 검증해 본다.
// vector - set - unordered_set
// O(N)		O(logN)		O(1)
// 10'000'000 개 int중에서 1000개의 int를 찾아본다.
// 
//------------------------------------------------------------------
#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>

#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

array<int, 1000'0000> numbers;
array<int, 10000> toFind;

default_random_engine dre;
uniform_int_distribution<int> uid{ 1, 100'000'000 };

int main()
{
	for (int& n : numbers)
		n = uid(dre);
	for (int& n : toFind)
		n = uid(dre);

	{	//벡터의 찾기실력
		vector<int>v{ numbers.begin(), numbers.end() };

		int cnt{};

		cout << "벡터의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;
	
		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end())
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();


		
		cout << "벡터에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;
		cout << "벡터의 바이트 수 - " << sizeof(v) << endl;

	}

	{	//셋의 찾기실력
		multiset<int>v{ numbers.begin(), numbers.end() };

		int cnt{};

		cout << "셋의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;
		
		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			if (v.contains(n))
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();


		
		cout << "셋에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;
		cout << "셋의 바이트 수 - " << sizeof(v) << endl;

	}

	{	//언오더드셋의 찾기실력
		unordered_multiset<int>v{ numbers.begin(), numbers.end() };

		int cnt{};

		cout << "언오더드셋의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;
		
		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			if (v.contains(n))
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();



		cout << "언오더스셋에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;
		cout << "언오더드셋의 바이트 수 - " << sizeof(v) << endl;

	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 3731

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 2일)
//
// 3. unordered_set/unordered_map
// - 순서없는 셋 파해쳐본다. - 화면에 메모리를 그림으로 출력
// - 내가 만든 STRING을 unordered_set<STRING> 하려면?
// 이거 보다 빨리 찾기 어렵다. (hash , O(1))
// 
// 컨테이너들의 찾기 실력을 검증해 본다.
// vector - 정렬된 vector - set - unordered_set
// O(N)		O(logN)		O(logN)		O(1)
// 10'000'000 개 int중에서 1000개의 int를 찾아본다.
// 
//------------------------------------------------------------------
#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>

#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

array<int, 1000'0000> numbers;
array<int, 10000> toFind;

default_random_engine dre;
uniform_int_distribution<int> uid{ 1, 100'000'000 };

int main()
{
	for (int& n : numbers)
		n = uid(dre);
	for (int& n : toFind)
		n = uid(dre);

	{	//벡터의 찾기실력
		vector<int>v{ numbers.begin(), numbers.end() };

		int cnt{};

		cout << "벡터의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;
	
		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end())
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();


		
		cout << "벡터에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;


	}

	{	//정렬된 벡터의 찾기실력
		vector<int>v{ numbers.begin(), numbers.end() };
		sort(v.begin(), v.end());
		int cnt{};

		cout << "정렬된 벡터의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;

		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			if (binary_search(v.begin(), v.end(), n))
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();



		cout << "정렬된 벡터에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;


	}


	{	//셋의 찾기실력
		multiset<int>v{ numbers.begin(), numbers.end() };

		int cnt{};

		cout << "셋의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;
		
		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			if (v.contains(n))
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();


		
		cout << "셋에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;
		

	}

	{	//언오더드셋의 찾기실력
		unordered_multiset<int>v{ numbers.begin(), numbers.end() };

		int cnt{};

		cout << "언오더드셋의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;
		
		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			if (v.contains(n))
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();



		cout << "언오더스셋에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;

	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 3724

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(11주 2일)
//
// 3. unordered_set/unordered_map
// - 순서없는 셋 파해쳐본다. - 화면에 메모리를 그림으로 출력
// - 내가 만든 STRING을 unordered_set<STRING> 하려면?
// 이거 보다 빨리 찾기 어렵다. (hash , O(1))
// 
// 컨테이너들의 찾기 실력을 검증해 본다.
// vector - 정렬된 vector - set - unordered_set
// O(N)		O(logN)		O(logN)		O(1)
// 10'000'000 개 int중에서 1000개의 int를 찾아본다.
// 
//------------------------------------------------------------------
#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>

#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

array<int, 1000> numbers;
array<int, 100> toFind;

default_random_engine dre;
uniform_int_distribution<int> uid{ 1, 100'000'000 };

int main()
{
	for (int& n : numbers)
		n = uid(dre);
	for (int& n : toFind)
		n = uid(dre);

	{	//벡터의 찾기실력
		vector<int>v{ numbers.begin(), numbers.end() };

		int cnt{};

		cout << "벡터의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;
	
		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end())
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();


		
		cout << "벡터에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;


	}

	{	//정렬된 벡터의 찾기실력
		vector<int>v{ numbers.begin(), numbers.end() };
		sort(v.begin(), v.end());
		int cnt{};

		cout << "정렬된 벡터의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;

		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			if (binary_search(v.begin(), v.end(), n))
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();



		cout << "정렬된 벡터에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;


	}


	{	//셋의 찾기실력
		multiset<int>v{ numbers.begin(), numbers.end() };

		int cnt{};

		cout << "셋의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;
		
		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			if (v.contains(n))
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();


		
		cout << "셋에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;
		

	}

	{	//언오더드셋의 찾기실력
		unordered_multiset<int>v{ numbers.begin(), numbers.end() };

		int cnt{};

		cout << "언오더드셋의 원소 개수	- " << v.size() << endl;
		cout << "찾을 int 개수	- " << toFind.size() << endl;
		
		// 스톱워치 누름
		auto start = chrono::steady_clock::now();
		for (int n : toFind) {
			if (v.contains(n))
				cnt++;
		}
		auto stop = chrono::steady_clock::now();
		// 스톱워치 다시 누름

		auto et = chrono::duration_cast<chrono::microseconds>(stop - start).count();



		cout << "언오더스셋에서 찾은 수	- " << cnt << endl;
		cout << "<<<걸린시간>>> - " << et << " us" << endl << endl;

	}

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 715

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	vector<STRING> v{"Standard" , "Template", "Library"};
	
	// [문제] v에 있는 원소가 전부 5글자 이상인가??


	bool res = all_of(v.begin(), v.end(), [](const STRING& s) {
		return s.getNum() >= 5;
		});
	if (res)
		cout << "5글자 이상" << endl;
	else
		cout << "5글자 아래" << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 721

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	vector<STRING> v{"Standard" , "Template", "Library", "ww"};
	
	// [문제] v에 있는 원소가 전부 5글자 이상인가??


	bool res = all_of(v.begin(), v.end(), [](const STRING& s) {
		return s.getNum() >= 5;
		});
	if (res)
		cout << "5글자 이상" << endl;
	else
		cout << "5글자 아래" << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 915

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

template<class InputIt, class UnaryPredicate >
bool allof(InputIt beg, InputIt end, UnaryPredicate f) 
{
	while (beg != end) {
		if (!f(*beg))
			return false;
		++beg;
	}
	return true;
}


int main()
{
	vector<STRING> v{"Standard", "Template", "Library"};
	
	// [문제] v에 있는 원소가 전부 5글자 이상인가??


	bool res = allof(v.begin(), v.end(), [](const STRING& s) {
		return s.getNum() >= 5;
		});
	if (res)
		cout << "5글자 이상" << endl;
	else
		cout << "5글자 아래" << endl;

	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 821

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	save("소스.cpp");
	string str{"Google's Russian branch plans to file for bankruptcy "};

	// [문제] str을 전광판처럼 계속 흘러가게 출력하라

	for (int i{}; i < 10; ++i) 
		cout << endl;
	while (true) {
		cout << format("{:^78}", str) << "\r";
		this_thread::sleep_for(100ms);
		// 한칸 왼쪽으로
		rotate(str.begin(), str.end() - 1, str.end());
	}
	
}

파일이름: 소스.cpp
파일크기: 742

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	save("소스.cpp");

	string s1{ "123456" };
	string s2{ "123467" };

	auto [s1의다른위치, s2의다른위치] = mismatch(s1.begin(), s1.end(), s2.begin());

	string s3{ s1의다른위치, s1.end() };
	string s4{ s2의다른위치, s2.end() };

	cout << s3 << endl;
	cout << s4 << endl;
	
}

파일이름: 소스.cpp
파일크기: 699

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

int main()
{
	save("소스.cpp");

	vector<int> v{ 1,2,3,4,5,6,7,8,9,10 };
	// v에서 짝수를 제거하라.
	v.erase(remove_if(v.begin(), v.end(), [](int n) {
		return !(n & 1);
		}), v.end());


	for (int n : v)
		cout << n << " ";
	cout << endl;
	
}

파일이름: 소스.cpp
파일크기: 785

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <string>
#include <thread>
#include <format>
#include <array>
#include <random>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)

extern bool 관찰;

default_random_engine dre;

int main()
{
	save("소스.cpp");

	//lotto
	//sample 

	vector<int> v(45);

	iota(v.begin(), v.end(), 1);


	array<int, 6> balls;
	sample(v.begin(), v.end(), balls.begin(), 6, dre);

	for (int n : balls)
		cout << n << " ";
	cout << endl;
}

파일이름: 소스.cpp
파일크기: 829

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <string>
#include <thread>
#include <format>
#include <array>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

int main()
{
	save("소스.cpp");
	//unique - 중복된 값을 제고
	// [문제] Frankenstein.txt에 사용된 단어 가짓수는?
	ifstream in{ "Frankenstein.txt" };
	vector <string> v{ istream_iterator<string>{in},{} };
	v.erase(unique(v.begin(), v.end()), v.end());
	cout << v.size() << endl;
}

파일이름: 소스.cpp
파일크기: 925

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort
// 5. stable_sort
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}
int main()
{
	// 데이터 준비
	vector<int>v(100);
	iota(v.begin(), v.end(), 1);
	cout << "vector<int>의 값들" << endl;
	print(v.begin(), v.end());
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1252

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort
// 5. stable_sort
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
default_random_engine dre;
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

int main()
{
	// 데이터 준비
	vector<int>v(100);
	iota(v.begin(), v.end(), 1);
	cout << "vector<int>의 값들" << endl;
	print(v.begin(), v.end());
	{
		shuffle(v.begin(), v.end(), dre);
		cout << "partition 이전" << endl;
		print(v.begin(), v.end());
	}
	// [문제] 홀수와 짝수로 구분하라
	partition(v.begin(), v.end(), [](int a) {
		return a % 2;
		});
	cout << "partition 이후" << endl;
	print(v.begin(), v.end());
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1244

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort
// 5. stable_sort
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
default_random_engine dre;
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

int main()
{
	// 데이터 준비
	vector<int>v(100);
	iota(v.begin(), v.end(), 1);
	cout << "vector<int>의 값들" << endl;
	print(v.begin(), v.end());
	{
		sort(v.begin(), v.end());
		cout << "partition 이전" << endl;
		print(v.begin(), v.end());
	}
	// [문제] 홀수와 짝수로 구분하라
	partition(v.begin(), v.end(), [](int a) {
		return a % 2;
		});
	cout << "partition 이후" << endl;
	print(v.begin(), v.end());
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1292

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort
// 5. stable_sort
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
default_random_engine dre;
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

int main()
{
	// 데이터 준비
	vector<int>v(100);
	iota(v.begin(), v.end(), 1);
	cout << "vector<int>의 값들" << endl;
	print(v.begin(), v.end());
	{
		shuffle(v.begin(), v.end(), dre);
		cout << "partition 이전" << endl;
		print(v.begin(), v.end());
	}
	// [문제] 홀수와 짝수로 구분하라
	auto p = partition(v.begin(), v.end(), [](int a) {
		return a % 2;
		});
	cout << "홀수" << endl;
	print(v.begin(), p);
	cout << "짝수" << endl;
	print(p, v.end());
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1374

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort
// 5. stable_sort
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
default_random_engine dre;
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

int main()
{
	// 데이터 준비
	vector<int>v(100);
	iota(v.begin(), v.end(), 1);
	cout << "vector<int>의 값들" << endl;
	print(v.begin(), v.end());
	{
		shuffle(v.begin(), v.end(), dre);
		cout << "nth_element 이전" << endl;
		print(v.begin(), v.end());
	}
	// [문제] 선착순 20명만 통과 - 1등부터 20등까지의 순서는 상관이 없다
	 nth_element(v.begin(), v.begin()+20, v.end());		// 출력값을 받을 필요가 없다
	cout << "기준선 통과" << endl;
	print(v.begin(), v.begin()+20);
	cout << "기준선 통과 못함" << endl;
	print(v.begin()+20, v.end());
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1385

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort
// 5. stable_sort
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
default_random_engine dre;
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

int main()
{
	// 데이터 준비
	vector<int>v(100);
	iota(v.begin(), v.end(), 1);
	cout << "vector<int>의 값들" << endl;
	print(v.begin(), v.end());
	{
		shuffle(v.begin(), v.end(), dre);
		cout << "nth_element 이전" << endl;
		print(v.begin(), v.end());
		// [문제] 선착순 20명만 통과 - 1등부터 20등까지의 순서는 상관이 없다
		nth_element(v.begin(), v.begin() + 20, v.end());		// 출력값을 받을 필요가 없다
		cout << "기준선 통과" << endl;
		print(v.begin(), v.begin() + 20);
		cout << "기준선 통과 못함" << endl;
		print(v.begin() + 20, v.end());
	}
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1385

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort
// 5. stable_sort
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
default_random_engine dre;
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

int main()
{
	// 데이터 준비
	vector<int>v(100);
	iota(v.begin(), v.end(), 1);
	cout << "vector<int>의 값들" << endl;
	print(v.begin(), v.end());
	{
		shuffle(v.begin(), v.end(), dre);
		cout << "nth_element 이전" << endl;
		print(v.begin(), v.end());
		// [문제] 선착순 20명만 통과 - 1등부터 20등까지의 순서는 상관이 없다
		nth_element(v.begin(), v.begin() + 20, v.end());		// 출력값을 받을 필요가 없다
		cout << "기준선 통과" << endl;
		print(v.begin(), v.begin() + 20);
		cout << "기준선 통과 못함" << endl;
		print(v.begin() + 20, v.end());
	}
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1385

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort
// 5. stable_sort
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
default_random_engine dre;
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

int main()
{
	// 데이터 준비
	vector<int>v(100);
	iota(v.begin(), v.end(), 1);
	cout << "vector<int>의 값들" << endl;
	print(v.begin(), v.end());
	{
		shuffle(v.begin(), v.end(), dre);
		cout << "nth_element 이전" << endl;
		print(v.begin(), v.end());
		// [문제] 선착순 20명만 통과 - 1등부터 20등까지의 순서는 상관이 없다
		nth_element(v.begin(), v.begin() + 50, v.end());		// 출력값을 받을 필요가 없다
		cout << "기준선 통과" << endl;
		print(v.begin(), v.begin() + 50);
		cout << "기준선 통과 못함" << endl;
		print(v.begin() + 50, v.end());
	}
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1342

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort
// 5. stable_sort
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
default_random_engine dre;
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

int main()
{
	// 데이터 준비
	vector<int>v(100);
	iota(v.begin(), v.end(), 1);
	cout << "vector<int>의 값들" << endl;
	print(v.begin(), v.end());
	{
		shuffle(v.begin(), v.end(), dre);
		cout << "partial_sort 이전" << endl;
		print(v.begin(), v.end());
		// [문제] 1등부터 50등까지 정렬
		partial_sort(v.begin(), v.begin() + 50, v.end());		// 출력값을 받을 필요가 없다
		cout << "50등까지 정렬" << endl;
		print(v.begin(), v.begin() + 50);
		cout << "나머지" << endl;
		print(v.begin() + 50, v.end());
	}
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1188

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort
// 5. stable_sort
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
default_random_engine dre;
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

int main()
{
	// 데이터 준비
	vector<int>v(100);
	iota(v.begin(), v.end(), 1);
	cout << "vector<int>의 값들" << endl;
	print(v.begin(), v.end());
	{
		shuffle(v.begin(), v.end(), dre);
		cout << "sort 이전" << endl;
		print(v.begin(), v.end());
		// [문제] 전체 정렬
		sort(v.begin(), v.end());
		cout << "sort" << endl;
		print(v.begin(), v.end());
	}
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1189

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort				- N log(N)
// 5. stable_sort		- N log(N^2)
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
random_device rd;
default_random_engine dre(rd());
uniform_int_distribution<int>uid('a', 'e');
uniform_int_distribution<int>uid2(1, 9);
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

struct Dog{
	int num;
	string name;
	Dog() {
		name += uid(dre);
		name += uid(dre);
		num = uid2(dre);
	}
};
int main()
{
	vector<Dog>v(20);
	for (const Dog& dog : v)
		cout << dog.name << " - " << dog.num << endl;
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1189

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort				- N log(N)
// 5. stable_sort		- N log(N^2)
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
random_device rd;
default_random_engine dre(rd());
uniform_int_distribution<int>uid('a', 'z');
uniform_int_distribution<int>uid2(1, 9);
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

struct Dog{
	int num;
	string name;
	Dog() {
		name += uid(dre);
		name += uid(dre);
		num = uid2(dre);
	}
};
int main()
{
	vector<Dog>v(20);
	for (const Dog& dog : v)
		cout << dog.name << " - " << dog.num << endl;
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1271

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort				- N log(N)
// 5. stable_sort		- N log(N^2)
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
random_device rd;
default_random_engine dre(rd());
uniform_int_distribution<int>uid('a', 'z');
uniform_int_distribution<int>uid2(1, 9);
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

struct Dog{
	int num;
	string name;
	Dog() {
		name += uid(dre);
		name += uid(dre);
		num = uid2(dre);
	}
};
int main()
{
	vector<Dog>v(20);
	sort(v.begin(), v.end(), [](Dog& a, Dog& b) {
		return a.name < b.name;
		});
	for (const Dog& dog : v)
		cout << dog.name << " - " << dog.num << endl;
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1427

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort				- N log(N)
// 5. stable_sort		- N log(N^2)
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
random_device rd;
default_random_engine dre(rd());
uniform_int_distribution<int>uid('a', 'z');
uniform_int_distribution<int>uid2(1, 9);
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

struct Dog{
	int num;
	string name;
	Dog() {
		name += uid(dre);
		name += uid(dre);
		num = uid2(dre);
	}
};
int main()
{
	vector<Dog>v(20);
	sort(v.begin(), v.end(), [](Dog& a, Dog& b) {
		return a.name < b.name;
		});
	for (const Dog& dog : v)
		cout << dog.name << " - " << dog.num << endl;
	sort(v.begin(), v.end(), [](Dog& a, Dog& b) {
		return a.num < b.num;
		});
	for (const Dog& dog : v)
		cout << dog.name << " - " << dog.num << endl;
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1452

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort				- N log(N)
// 5. stable_sort		- N log(N^2)
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
random_device rd;
default_random_engine dre(rd());
uniform_int_distribution<int>uid('a', 'z');
uniform_int_distribution<int>uid2(1, 9);
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

struct Dog{
	int num;
	string name;
	Dog() {
		name += uid(dre);
		name += uid(dre);
		num = uid2(dre);
	}
};
int main()
{
	vector<Dog>v(100);
	sort(v.begin(), v.end(), [](Dog& a, Dog& b) {
		return a.name < b.name;
		});
	for (const Dog& dog : v)
		cout << dog.name << " - " << dog.num << endl;
	cout << endl << endl;
	sort(v.begin(), v.end(), [](Dog& a, Dog& b) {
		return a.num < b.num;
		});
	for (const Dog& dog : v)
		cout << dog.name << " - " << dog.num << endl;
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1483

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(12주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// 1. partition
// 2. nth_element
// 3. partial_sort
// 4. sort				- N log(N)
// 5. stable_sort		- N log(N^2)
// 
// 6/15 (수) - 기말시험
// 6/16 (목) - 강의 끝
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <format>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;
random_device rd;
default_random_engine dre(rd());
uniform_int_distribution<int>uid('a', 'z');
uniform_int_distribution<int>uid2(1, 9);
template<class Data>
void print(Data b, Data e)
{
	while (b != e) {
		cout << format( "{:4d}",*b );
		++b;
	}
	cout << endl << endl;
}

struct Dog{
	int num;
	string name;
	Dog() {
		name += uid(dre);
		name += uid(dre);
		num = uid2(dre);
	}
};
int main()
{
	vector<Dog>v(100);
	sort(v.begin(), v.end(), [](const Dog& a, const Dog& b) {
		return a.name < b.name;
		});
	for (const Dog& dog : v)
		cout << dog.name << " - " << dog.num << endl;
	cout << endl << endl;
	stable_sort(v.begin(), v.end(), [](const Dog& a, const Dog& b) {
		return a.num < b.num;
		});
	for (const Dog& dog : v)
		cout << dog.name << " - " << dog.num << endl;
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 721

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(13주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// C++ 20의 핵심
// concepts
// range / view
//		coroutine
//		module - ixx
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <format>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

int main()
{
	vector v{ 1,2,3,4,5 };
	cout << distance(v.begin(), v.end())<<endl;
	// 반복자 간의 거리를 계산해주는 distance 함수가 있다.
	// -> concept -> range
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 736

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(13주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// C++ 20의 핵심
// concepts
// range / view
//		coroutine
//		module - ixx
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <format>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

int main()
{
	list v{ 1,2,3,4,5 };
	cout << distance(v.begin(), v.end())<<endl;
	// 반복자 간의 거리를 계산해주는 distance 함수가 있다.
	// -> concept -> range
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 752

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(13주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// C++ 20의 핵심
// concepts
// range / view
//		coroutine
//		module - ixx
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <forward_list>
#include <format>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

int main()
{
	forward_list v{ 1,2,3,4,5 };
	cout << distance(v.begin(), v.end())<<endl;
	// 반복자 간의 거리를 계산해주는 distance 함수가 있다.
	// -> concept -> range
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 884

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(13주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// C++ 20의 핵심
// concepts
// range / view
//		coroutine
//		module - ixx
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <forward_list>
#include <format>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

template <class sIter, class eIter>
int dist(sIter s, eIter e)
{
	int step{};
	while (s == e) {
		s++;
		step++;
	}
	return step;
}
int main()
{
	vector v{ 1,2,3,4,5 };
	cout << dist(v.begin(), v.end())<<endl;
	// 반복자 간의 거리를 계산해주는 distance 함수가 있다.
	// -> concept -> range
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 884

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(13주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// C++ 20의 핵심
// concepts
// range / view
//		coroutine
//		module - ixx
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <forward_list>
#include <format>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

template <class sIter, class eIter>
int dist(sIter s, eIter e)
{
	int step{};
	while (s != e) {
		s++;
		step++;
	}
	return step;
}
int main()
{
	vector v{ 1,2,3,4,5 };
	cout << dist(v.begin(), v.end())<<endl;
	// 반복자 간의 거리를 계산해주는 distance 함수가 있다.
	// -> concept -> range
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 943

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(13주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// C++ 20의 핵심
// concepts
// range / view
//		coroutine
//		module - ixx
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <forward_list>
#include <format>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

template <class sIter, class eIter>
int dist(sIter s, eIter e)
{
	int step{};
	while (s != e) {
		if (s < e) {
			s++;
			step++;
		}
		else {
			s--;
			step--;
		}
	}
	return step;
}
int main()
{
	vector v{ 1,2,3,4,5 };
	cout << dist(v.begin(), v.end())<<endl;
	// 반복자 간의 거리를 계산해주는 distance 함수가 있다.
	// -> concept -> range
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 943

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(13주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// C++ 20의 핵심
// concepts
// range / view
//		coroutine
//		module - ixx
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <forward_list>
#include <format>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

template <class sIter, class eIter>
int dist(sIter s, eIter e)
{
	int step{};
	while (s != e) {
		if (s < e) {
			s++;
			step++;
		}
		else {
			s--;
			step--;
		}
	}
	return step;
}
int main()
{
	vector v{ 1,2,3,4,5 };
	cout << dist(v.end(), v.begin())<<endl;
	// 반복자 간의 거리를 계산해주는 distance 함수가 있다.
	// -> concept -> range
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 829

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(13주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// C++ 20의 핵심
// concepts
// range / view
//		coroutine
//		module - ixx
// 
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <forward_list>
#include <format>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

template <class sIter, class eIter>
int dist(sIter s, eIter e)
{

	return e-s;
}
int main()
{
	vector v{ 1,2,3,4,5 };
	cout << dist(v.end(), v.begin())<<endl;
	// 반복자 간의 거리를 계산해주는 distance 함수가 있다.
	// -> concept -> range
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 943

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(13주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// C++ 20의 핵심
// concepts
// range / view
//		coroutine
//		module - ixx
// 
// type traits
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <format>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

template <class Iter>
int dist(Iter s, Iter e)
{
	// 반복잘 일 때만 계산하고 싶어
	// Iter가 input_iterator_tag를 상속했나 판단한다.
	if (is_base_of_v <input_iterator_tag,
		typename iterator_traits<Iter>::iterator_category>) {
		cout << "반복자가 맞다" << endl;
		return 1;
		}
}
int main()
{
	vector v{ 1,2,3,4,5 };
	cout << dist(v.end(), v.begin())<<endl;
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 864

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(13주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// C++ 20의 핵심
// concepts
// range / view
//		coroutine
//		module - ixx
// 
// type traits
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include <format>
#include <concepts>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

template <contiguous_iterator Iter>
void cf(Iter s, Iter e)
{
	cout << "contiguous 메모리" << endl;
}
int main()
{
	// contiguous한 메모리에서만 작업하는 cf함수
	vector<int>v;
	deque<int>d;

	cf(v.begin(), v.end());
	//cf(d.begin(), d.end());
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1093

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(13주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// C++ 20의 핵심
// concepts
// range / view
//		coroutine
//		module - ixx
// 
// type traits
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include <format>
#include <concepts>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

template <input_iterator Iter>
long long dist(Iter b, Iter e)
{
	// 만일 random_access 반복자라면 - 로 계산
	
	if (is_same_v<typename iterator_traits<Iter>::iterator_category,
		random_access_iterator_tag>)
		return e - b;

	// 아니라면 
	long long step{};

	while (b != e) {
		++step;
		++b;
	}
	return step;
}
int main()
{
	// 표준 dist를 구현한다.
	vector<int> v{ 1,2,3 };
	cout << dist(v.begin(), v.end()) << endl;
	//dist(1, 100);				// 제약조건 만족 실패
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1530

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(13주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// C++ 20의 핵심
// concepts
// range / view
//		coroutine
//		module - ixx
// 
// type traits
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include <format>
#include <concepts>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

template <input_iterator Iter>
long long dist(Iter b, Iter e)
{
	// 만일 random_access 반복자라면 - 로 계산
	
	if constexpr (is_same_v<typename iterator_traits<Iter>::iterator_category,
		random_access_iterator_tag>) {
		cout << " 뺄셈으로 계싼 " << endl;
		return e - b;
	}

	// 아니라면 
	// 이 코드만 남으면 좋은데 list 반복자가 전달할때 위의 e-b코드도 실행된다.
	// -> list 반복자가 - 연산을 지원하지 않기 대문에 compile 오류
	// C++17 이전 - teg dispatching으로 해결
	// C++17 이후 - constexpr if (선택적 코드생성)로 해결가능
	else {
		long long step{};

		while (b != e) {
			++step;
			++b;
		}
		cout << " 한 걸음씩 세서 계산 " << endl;
		return step;
	}
}
int main()
{
	// 표준 dist를 구현한다.
	vector<int> v{ 1,2,3 };
	list<int>l;
	cout << dist(l.begin(), l.end()) << endl;
	cout << dist(v.begin(), v.end()) << endl;
	//dist(1, 100);				// 제약조건 만족 실패
	save("소스.cpp");
	
}

파일이름: 소스.cpp
파일크기: 1543

//------------------------------------------------------------------
// 2022년 1학기 STL	3.2	 수910	수910목56			(13주 1일)
//
// 분리와 정렬 - Complexity(복잡도) 순서
// 
// C++ 20의 핵심
// concepts
// range / view
//		coroutine
//		module - ixx
// 
// type traits
//------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include <deque>
#include <format>
#include <concepts>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;		// 가독성으로 만 씀 (쓰면 안됨)
extern bool 관찰;

template <input_iterator Iter>
long long dist(Iter b, Iter e)
{
	// 만일 random_access 반복자라면 - 로 계산
	
	if constexpr (is_same_v<typename iterator_traits<Iter>::iterator_category,
		random_access_iterator_tag>) {
		cout << " 뺄셈으로 계싼 " << endl;
		return e - b;
	}

	// 아니라면 
	// 이 코드만 남으면 좋은데 list 반복자가 전달할때 위의 e-b코드도 실행된다.
	// -> list 반복자가 - 연산을 지원하지 않기 대문에 compile 오류
	// C++17 이전 - teg dispatching으로 해결
	// C++17 이후 - constexpr if (선택적 코드생성)로 해결가능
	else {
		long long step{};

		while (b != e) {
			++step;
			++b;
		}
		cout << " 한 걸음씩 세서 계산 " << endl;
		return step;
	}
}
int main()
{
	// 표준 dist를 구현한다.
	vector<int> v{ 1,2,3 };
	list<int>l{ 1,2,3,4,5 };
	cout << dist(l.begin(), l.end()) << endl;
	cout << dist(v.begin(), v.end()) << endl;
	//dist(1, 100);				// 제약조건 만족 실패
	save("소스.cpp");
	
}